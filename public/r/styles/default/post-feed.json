{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "post-feed",
  "type": "registry:block",
  "description": "A post-feed page displaying a list of posts.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar.json",
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar-button.json",
    "https://akasha-ui.pages.dev/r/styles/default/card.json",
    "https://akasha-ui.pages.dev/r/styles/default/stack.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json",
    "https://akasha-ui.pages.dev/r/styles/default/icon-container.json",
    "https://akasha-ui.pages.dev/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "blocks/post-feed/page.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n  useInfiniteQuery,\n} from \"@tanstack/react-query\";\n\nimport { EditorPlaceholder } from \"@/registry/default/blocks/post-feed/components/editor-placeholder\";\nimport { PostResolver } from \"@/registry/default/blocks/post-feed/components/posts-resolver\";\nimport { POSTS_STREAM } from \"@/registry/default/blocks/post-feed/mock-data\";\nimport {\n  InfiniteScroll,\n  InfiniteScrollList,\n} from \"@/registry/default/ui/infinite-scroll\";\nimport { Stack } from \"@/registry/default/ui/stack\";\n\nconst queryClient = new QueryClient();\n\nasync function fetchPostsStream(\n  limit: number,\n  offset: number = 0\n): Promise<{ ids: string[]; nextOffset: number }> {\n  const startIndex = offset * limit;\n  const endIndex = Math.min(startIndex + limit, POSTS_STREAM.length);\n  const ids = POSTS_STREAM.slice(startIndex, endIndex).map((post) => post.id);\n\n  return {\n    ids,\n    nextOffset: endIndex < POSTS_STREAM.length ? offset + 1 : -1,\n  };\n}\n\nfunction Posts() {\n  const {\n    status,\n    data,\n    error,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"post-ids\"],\n    queryFn: (ctx) => fetchPostsStream(10, ctx.pageParam),\n    getNextPageParam: (lastGroup) =>\n      lastGroup.nextOffset === -1 ? undefined : lastGroup.nextOffset,\n    initialPageParam: 0,\n  });\n\n  const postIds = data ? data.pages.flatMap((d) => d.ids) : [];\n\n  return (\n    <Stack\n      spacing={4}\n      className=\"p-4 **:data-[slot=infinite-scroll-container]:h-fit h-screen\"\n    >\n      <EditorPlaceholder\n        profileDID=\"did:pkh:eip155:11155111:0x1a4b3c567890abcdeffedcba1234567890abcdef\"\n        avatar={{ src: \"https://github.com/akashaorg.png\" }}\n        cta=\"From your mind to the world. \"\n        actionLabel=\"Post Something\"\n        onClick={() => {\n          console.log(\"Show beam editor\");\n        }}\n      />\n      {status === \"pending\" ? (\n        <p>Loading...</p>\n      ) : status === \"error\" ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <InfiniteScroll\n          count={postIds.length}\n          estimatedHeight={220}\n          overScan={5}\n          gap={16}\n          loading={isFetchingNextPage}\n          hasNextPage={hasNextPage}\n          onLoadMore={() => {\n            fetchNextPage();\n          }}\n          loadingIndicator=\"Loading ...\"\n          scrollElementType=\"element\"\n        >\n          <InfiniteScrollList>\n            {(index) => {\n              const postId = postIds[index];\n              return <PostResolver key={postId} postId={postId} />;\n            }}\n          </InfiniteScrollList>\n        </InfiniteScroll>\n      )}\n    </Stack>\n  );\n}\n\nexport default function Page() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Posts />\n    </QueryClientProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/post-feed/page.tsx"
    },
    {
      "path": "blocks/content-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { MessageCircle, SatelliteDish } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { NsfwWarning } from \"@/registry/default/blocks/nsfw-warning\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { IconContainer } from \"@/registry/default/ui/icon-container\";\nimport {\n  ProfileAvatarButton,\n  ProfileAvatarButtonAvatar,\n  ProfileAvatarButtonAvatarFallback,\n  ProfileAvatarButtonAvatarImage,\n  ProfileDidField,\n  ProfileName,\n} from \"@/registry/default/ui/profile-avatar-button\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\ninterface ContentCardProps {\n  author: {\n    did: string;\n    avatarSrc: string;\n    name: string;\n  };\n  publishedAt: string;\n  repliesCount: number;\n  publishedVia?: string;\n  menu?: {\n    trigger: React.ReactNode;\n    items: {\n      content: React.ReactNode;\n      className?: string;\n      onClick?: () => void;\n    }[];\n  };\n  tags?: string[];\n  nsfw?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  onRepliesClick?: () => void;\n}\n\nconst ContentCard = ({\n  author,\n  publishedAt,\n  tags,\n  publishedVia,\n  repliesCount,\n  className,\n  nsfw,\n  menu,\n  children,\n  onRepliesClick,\n}: ContentCardProps) => {\n  const [showNsfw, setShowNsfw] = React.useState(nsfw);\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <Stack direction=\"column\" spacing={4}>\n        <Stack direction=\"row\" justifyContent={\"between\"}>\n          <ProfileAvatarButton profileDID={author.did}>\n            <ProfileAvatarButtonAvatar>\n              <ProfileAvatarButtonAvatarImage\n                src={author.avatarSrc}\n                alt={`@${author.name}`}\n              />\n              <ProfileAvatarButtonAvatarFallback />\n            </ProfileAvatarButtonAvatar>\n            <ProfileName>\n              {author.name}{\" \"}\n              <Typography\n                variant=\"xs\"\n                className=\"text-muted-foreground font-normal\"\n              >\n                Â· {publishedAt}\n              </Typography>\n            </ProfileName>\n            <ProfileDidField />\n          </ProfileAvatarButton>\n          {menu && (\n            <DropdownMenu>\n              <DropdownMenuTrigger>{menu.trigger}</DropdownMenuTrigger>\n              <DropdownMenuContent>\n                {menu?.items.map(({ content, className, onClick }, index) => (\n                  <DropdownMenuItem\n                    key={index}\n                    onClick={onClick}\n                    className={className}\n                  >\n                    {content}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </Stack>\n\n        {showNsfw ? (\n          <NsfwWarning\n            onShowClick={() => setShowNsfw(!showNsfw)}\n            title=\"Content Warning: Not Safe Work\"\n            description=\"The post author marked this post as NSFW\"\n          />\n        ) : (\n          children\n        )}\n\n        {tags && (\n          <Stack direction=\"row\" spacing={2}>\n            {tags.map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"border-secondary\">\n                <Typography variant=\"xs\" className=\"font-normal\">\n                  {tag}\n                </Typography>\n              </Badge>\n            ))}\n          </Stack>\n        )}\n        <Stack direction=\"row\" spacing={2} justifyContent=\"between\">\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            {publishedVia && (\n              <>\n                <IconContainer size=\"xs\" variant=\"round\">\n                  <SatelliteDish className=\"text-primary\" size={12} />\n                </IconContainer>\n\n                <Typography variant=\"xs\" className=\"text-muted-foreground\">\n                  Published via {publishedVia}\n                </Typography>\n              </>\n            )}\n          </Stack>\n\n          <Button\n            asChild\n            onClick={onRepliesClick}\n            className=\"border-none bg-transparent pr-0\"\n          >\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n              <MessageCircle size={16} className=\"text-primary\" />\n              {repliesCount > 0 && (\n                <Typography variant=\"xs\" className=\"font-bold text-primary\">\n                  {repliesCount}\n                </Typography>\n              )}\n            </Stack>\n          </Button>\n        </Stack>\n      </Stack>\n    </Card>\n  );\n};\n\nexport { ContentCard };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/post-feed/components/editor-placeholder.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport {\n  ProfileAvatar,\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n} from \"@/registry/default/ui/profile-avatar\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\nconst EditorPlaceholder = ({\n  avatar,\n  profileDID,\n  cta,\n  actionLabel,\n  className,\n  ...props\n}: {\n  avatar: {\n    src: string;\n  };\n  profileDID: string;\n  cta: string;\n  actionLabel: string;\n} & React.ComponentProps<\"div\">) => {\n  return (\n    <Card\n      className={cn(\"border-border bg-nested-card p-4\", className)}\n      {...props}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"between\">\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n          <ProfileAvatar profileDID={profileDID}>\n            <ProfileAvatarImage src={avatar.src} alt=\"Profile avatar\" />\n            <ProfileAvatarFallback />\n          </ProfileAvatar>\n          <Typography variant=\"xs\" bold>\n            {cta}\n          </Typography>\n        </Stack>\n        <Button size=\"sm\">{actionLabel}</Button>\n      </Stack>\n    </Card>\n  );\n};\n\nexport { EditorPlaceholder };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/post-feed/components/posts-resolver.tsx",
      "content": "import * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Ellipsis } from \"lucide-react\";\n\nimport { ContentCard } from \"@/registry/default/blocks/content-card\";\nimport { POSTS } from \"@/registry/default/blocks/post-feed/mock-data\";\nimport { formatRelativeTime } from \"@/registry/default/lib/format-relative-time\";\nimport { Image } from \"@/registry/default/ui/image\";\nimport {\n  InlineNotification,\n  InlineNotificationDescription,\n  InlineNotificationTitle,\n} from \"@/registry/default/ui/inline-notification\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\nlet errorThrown = false;\n\nasync function fetchPostById(postId: string) {\n  await new Promise((resolve) => setTimeout(resolve, 300));\n\n  if (errorThrown && Math.random() < 0.5) {\n    errorThrown = true;\n    throw new Error(\"Failed to fetch post data\");\n  }\n\n  return POSTS.find((post) => post.id === postId);\n}\n\nfunction PostResolver({ postId }: { postId: string }) {\n  const { data: post, status } = useQuery({\n    queryKey: [\"post\", postId],\n    queryFn: async () => fetchPostById(postId),\n    enabled: !!postId,\n  });\n\n  if (status === \"pending\") return <p>Loading post...</p>;\n  if (status === \"error\")\n    return (\n      <InlineNotification variant=\"destructive\" className=\"bg-nested-card\">\n        <InlineNotificationTitle>\n          Content couldnât be loaded correctly\n        </InlineNotificationTitle>\n        <InlineNotificationDescription>\n          Unable to load content. Please try again later.\n        </InlineNotificationDescription>\n      </InlineNotification>\n    );\n\n  return (\n    post && (\n      <ContentCard\n        author={post.author}\n        publishedAt={formatRelativeTime(post.createdAt)}\n        publishedVia={post.publishedVia}\n        repliesCount={post.repliesCount}\n        onRepliesClick={() => {\n          console.log(\"Reply to a post\");\n        }}\n        menu={{\n          trigger: (\n            <Ellipsis\n              size={20}\n              className=\"text-primary cursor-pointer hover:text-muted\"\n            />\n          ),\n          items: [{ content: \"Flag\", onClick: () => console.log(\"flag\") }],\n        }}\n      >\n        <Stack spacing={4}>\n          {post.contents.map((content, index) => (\n            <React.Fragment key={index}>\n              {content.type === \"image\" && (\n                <Image\n                  src={content.value}\n                  alt=\"image\"\n                  showLoadingIndicator={true}\n                />\n              )}\n              {content.type === \"text\" && (\n                <Typography key={index} variant=\"p\">\n                  {content.value}\n                </Typography>\n              )}\n            </React.Fragment>\n          ))}\n        </Stack>\n      </ContentCard>\n    )\n  );\n}\n\nexport { PostResolver };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/post-feed/mock-data.ts",
      "content": "interface MockPost {\n  id: string;\n  author: {\n    did: string;\n    avatarSrc: string;\n    name: string;\n  };\n  contents: { type: \"text\" | \"image\"; value: string }[];\n  createdAt: string;\n  publishedVia: string;\n  repliesCount: number;\n}\n\nconst POSTS_STREAM = [\n  { id: \"k00000000001\", createdAt: \"2025-03-11T18:00:00Z\" },\n  { id: \"k00000000002\", createdAt: \"2025-03-11T17:00:00Z\" },\n  { id: \"k00000000003\", createdAt: \"2025-03-11T16:00:00Z\" },\n  { id: \"k00000000004\", createdAt: \"2025-03-11T15:00:00Z\" },\n  { id: \"k00000000005\", createdAt: \"2025-03-11T14:00:00Z\" },\n  { id: \"k00000000006\", createdAt: \"2025-03-11T13:00:00Z\" },\n  { id: \"k00000000007\", createdAt: \"2025-03-11T12:00:00Z\" },\n  { id: \"k00000000008\", createdAt: \"2025-03-11T11:00:00Z\" },\n  { id: \"k00000000009\", createdAt: \"2025-03-11T10:00:00Z\" },\n  { id: \"k00000000010\", createdAt: \"2025-03-11T09:00:00Z\" },\n  { id: \"k00000000011\", createdAt: \"2025-03-11T08:00:00Z\" },\n  { id: \"k00000000012\", createdAt: \"2025-03-11T07:00:00Z\" },\n  { id: \"k00000000013\", createdAt: \"2025-03-11T06:00:00Z\" },\n  { id: \"k00000000014\", createdAt: \"2025-03-11T05:00:00Z\" },\n  { id: \"k00000000015\", createdAt: \"2025-03-11T04:00:00Z\" },\n  { id: \"k00000000016\", createdAt: \"2025-03-11T03:00:00Z\" },\n  { id: \"k00000000017\", createdAt: \"2025-03-11T02:00:00Z\" },\n  { id: \"k00000000018\", createdAt: \"2025-03-11T01:00:00Z\" },\n  { id: \"k00000000019\", createdAt: \"2025-03-11T00:00:00Z\" },\n];\n\nconst POSTS: MockPost[] = [\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x1a4b3c567890abcdeffedcba1234567890abcdef\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man1\",\n      name: \"User1\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/66/350/300\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 1.\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/181/350/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 5,\n    id: \"k00000000001\",\n    createdAt: \"2025-02-28T06:26:53.092058Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x9f8e7d6c5b4a3210abcdef1234567890abcdef12\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman1\",\n      name: \"User2\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 2.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 8,\n    id: \"k00000000002\",\n    createdAt: \"2025-02-16T13:37:53.092079Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x4e3d2c1b0a9f87654321abcdef1234567890abcd\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man2\",\n      name: \"User3\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/478/300/350\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 12,\n    id: \"k00000000003\",\n    createdAt: \"2025-02-28T04:38:53.092085Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x4ec7c6d4a99a7\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman2\",\n      name: \"User4\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/164/200/400\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/297/300/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 10,\n    id: \"k00000000004\",\n    createdAt: \"2025-03-01T17:03:53.092091Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x9e0a08a030ed2\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man3\",\n      name: \"User5\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 5.\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 5.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 11,\n    id: \"k00000000005\",\n    createdAt: \"2025-02-25T02:44:53.092097Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xfc7c08cf9097f\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman3\",\n      name: \"User6\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/37/350/400\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 25,\n    id: \"k00000000006\",\n    createdAt: \"2025-02-23T05:58:53.092102Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xba2c9e8476422\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man4\",\n      name: \"User7\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/458/400/300\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 7.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 30,\n    id: \"k00000000007\",\n    createdAt: \"2025-02-20T05:52:53.092108Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xae45bf371675e\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman4\",\n      name: \"User8\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/356/400/400\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/5/350/400\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 8.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 11,\n    id: \"k00000000008\",\n    createdAt: \"2025-02-14T12:06:53.092115Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x12179adb88f35a\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man5\",\n      name: \"User9\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/103/200/400\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 9.\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/367/300/300\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 29,\n    id: \"k00000000009\",\n    createdAt: \"2025-02-28T08:04:53.092121Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x1c6875137f3323\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman5\",\n      name: \"User10\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/108/200/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 15,\n    id: \"k00000000010\",\n    createdAt: \"2025-02-08T08:43:53.092126Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xf5433646da51f\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man1\",\n      name: \"User11\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 11.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 7,\n    id: \"k00000000011\",\n    createdAt: \"2025-02-27T04:09:53.092151Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xca9b13f453349\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman1\",\n      name: \"User12\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 12.\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 12.\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 12.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 6,\n    id: \"k00000000012\",\n    createdAt: \"2025-03-01T21:08:53.092160Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x20567cfc6a9c8a\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man2\",\n      name: \"User13\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 13.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 1,\n    id: \"k00000000013\",\n    createdAt: \"2025-02-27T22:44:53.092168Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x432229ce8a2b2\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman2\",\n      name: \"User14\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/6/350/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 2,\n    id: \"k00000000014\",\n    createdAt: \"2025-02-15T13:32:53.092178Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x1daeb3e7d5e477\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man3\",\n      name: \"User15\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/51/400/500\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 15.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 5,\n    id: \"k00000000015\",\n    createdAt: \"2025-03-02T09:53:53.092187Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0xb9f3130b8f3ea\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman3\",\n      name: \"User16\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/164/400/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 5,\n    id: \"k00000000016\",\n    createdAt: \"2025-02-21T20:29:53.092196Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x7dd8b0da8482f\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man4\",\n      name: \"User17\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/354/350/350\",\n      },\n      {\n        type: \"text\",\n        value: \"Content sample 17.\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 30,\n    id: \"k00000000017\",\n    createdAt: \"2025-02-21T19:17:53.092201Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x18f334a2534a56\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Woman4\",\n      name: \"User18\",\n    },\n    contents: [\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/87/400/450\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 14,\n    id: \"k00000000018\",\n    createdAt: \"2025-02-10T07:37:53.092207Z\",\n  },\n  {\n    author: {\n      did: \"did:pkh:eip155:11155111:0x481b347c8cfdd\",\n      avatarSrc: \"https://api.dicebear.com/8.x/adventurer/svg?seed=Man5\",\n      name: \"User19\",\n    },\n    contents: [\n      {\n        type: \"text\",\n        value: \"Content sample 19.\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/47/250/450\",\n      },\n      {\n        type: \"image\",\n        value: \"https://picsum.photos/id/376/250/500\",\n      },\n    ],\n    publishedVia: \"Antenna\",\n    repliesCount: 18,\n    id: \"k00000000019\",\n    createdAt: \"2025-03-06T10:50:53.092212Z\",\n  },\n];\n\nexport { POSTS, POSTS_STREAM };\n",
      "type": "registry:file",
      "target": "app/post-feed/mock-data.tsx"
    },
    {
      "path": "lib/format-relative-time.ts",
      "content": "export function formatRelativeTime(isoDate: string): string {\n  const now = new Date();\n  const pastDate = new Date(isoDate);\n  const diffInSeconds = Math.floor((now.getTime() - pastDate.getTime()) / 1000);\n\n  const timeUnits = [\n    { limit: 60, divisor: 1, suffix: \"s\" },\n    { limit: 3600, divisor: 60, suffix: \"m\" },\n    { limit: 86400, divisor: 3600, suffix: \"h\" },\n    { limit: 2592000, divisor: 86400, suffix: \"d\" },\n    { limit: 31536000, divisor: 2592000, suffix: \"mo\" },\n  ];\n\n  for (const unit of timeUnits) {\n    if (diffInSeconds < unit.limit) {\n      return `${Math.floor(diffInSeconds / unit.divisor)}${unit.suffix} ago`;\n    }\n  }\n\n  return `${Math.floor(diffInSeconds / 31536000)}y ago`;\n}\n",
      "type": "registry:lib"
    }
  ],
  "categories": [
    "post-feed"
  ]
}