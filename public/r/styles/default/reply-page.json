{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reply-page",
  "type": "registry:block",
  "description": "A reply post page with reply editor and replies",
  "dependencies": [
    "social-content"
  ],
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar-button.json",
    "https://akasha-ui.pages.dev/r/styles/default/card.json",
    "https://akasha-ui.pages.dev/r/styles/default/stack.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json",
    "https://akasha-ui.pages.dev/r/styles/default/icon-container.json",
    "https://akasha-ui.pages.dev/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "blocks/social-content/reply-page/page.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n  useInfiniteQuery,\n} from \"@tanstack/react-query\";\nimport { Ellipsis } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ReplyCard } from \"@/registry/default/blocks/social-content/reply-card\";\nimport { ReplyEditor } from \"@/registry/default/blocks/social-content/reply-editor\";\nimport {\n  REPLIES_STREAM,\n  REPLY,\n} from \"@/registry/default/blocks/social-content/reply-page/mock-data\";\nimport { ReplyResolver } from \"@/registry/default/blocks/social-content/reply-resolver\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport {\n  InfiniteScroll,\n  InfiniteScrollList,\n} from \"@/registry/default/ui/infinite-scroll\";\n\nconst queryClient = new QueryClient();\n\nasync function fetchRepliesStream(\n  limit: number,\n  offset: number = 0\n): Promise<{ ids: string[]; nextOffset: number }> {\n  const startIndex = offset * limit;\n  const endIndex = Math.min(startIndex + limit, REPLIES_STREAM.length);\n  const ids = REPLIES_STREAM.slice(startIndex, endIndex).map((post) => post.id);\n\n  return {\n    ids,\n    nextOffset: endIndex < REPLIES_STREAM.length ? offset + 1 : -1,\n  };\n}\n\nfunction Replies() {\n  const {\n    status,\n    data,\n    error,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery({\n    queryKey: [\"post-ids\"],\n    queryFn: (ctx) => fetchRepliesStream(10, ctx.pageParam),\n    getNextPageParam: (lastGroup) =>\n      lastGroup.nextOffset === -1 ? undefined : lastGroup.nextOffset,\n    initialPageParam: 0,\n  });\n\n  const replyIds = data ? data.pages.flatMap((d) => d.ids) : [];\n\n  const { content, ...replyProps } = REPLY;\n  return (\n    <div className=\"p-4 h-full\">\n      <ReplyCard\n        onRepliesClick={() => {\n          console.log(\"Not implemented\");\n        }}\n        className=\"border-b-none rounded-b-none\"\n        menu={{\n          trigger: (\n            <Ellipsis size={20} className=\"text-primary hover:text-muted\" />\n          ),\n          items: [\n            { content: \"Flag\", onClick: () => console.log(\"flag\") },\n            {\n              content: \"Delete\",\n              className: \"text-destructive\",\n              onClick: () => console.log(\"delete\"),\n            },\n            { content: \"Edit\", onClick: () => console.log(\"edit\") },\n          ],\n        }}\n        {...replyProps}\n      >\n        {content}\n      </ReplyCard>\n      <Card className=\"border-y-0 p-2 rounded-none\">\n        <ReplyEditor\n          avatarSrc={\"https://github.com/akashaorg.png\"}\n          onReplyClick={() => {\n            console.log(\"Not implemented\");\n          }}\n        />\n      </Card>\n      {status === \"pending\" ? (\n        <p>Loading...</p>\n      ) : status === \"error\" ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <InfiniteScroll\n          count={replyIds.length}\n          estimatedHeight={220}\n          overScan={5}\n          gap={0}\n          loading={isFetchingNextPage}\n          hasNextPage={hasNextPage}\n          onLoadMore={() => {\n            fetchNextPage();\n          }}\n          loadingIndicator=\"Loading ...\"\n          scrollElementType=\"window\"\n        >\n          <InfiniteScrollList>\n            {(index) => {\n              const replyId = replyIds[index];\n              return (\n                <ReplyResolver\n                  key={replyId}\n                  replyId={replyId}\n                  className={cn(\n                    index === replyIds.length - 1\n                      ? \"rounded-t-none\"\n                      : \"rounded-none border-b-0\"\n                  )}\n                />\n              );\n            }}\n          </InfiniteScrollList>\n        </InfiniteScroll>\n      )}\n    </div>\n  );\n}\n\nexport default function Page() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Replies />\n    </QueryClientProvider>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/post/page.tsx"
    },
    {
      "path": "blocks/social-content/reply-page/mock-data.ts",
      "content": "const REPLY = {\n  id: \"r00000000001\",\n  author: {\n    did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n    avatarSrc: \"https://github.com/akashaorg.png\",\n    name: \"TeddythePug\",\n  },\n  content:\n    \"Tobi, you’re not drinking coffee—you’re fueling a NASA rocket launch. 🚀☕️\",\n  publishedAt: \"45 mins ago\",\n  repliesCount: 0,\n  nsfw: false,\n};\n\nconst REPLIES_STREAM = [\n  { id: \"r00000000004\", createdAt: \"2025-03-11T18:00:00Z\" },\n  { id: \"r00000000006\", createdAt: \"2025-03-11T17:00:00Z\" },\n  { id: \"r00000000006\", createdAt: \"2025-03-11T16:00:00Z\" },\n];\n\nexport { REPLY, REPLIES_STREAM };\n",
      "type": "registry:file",
      "target": "app/reply/mock-data.ts"
    },
    {
      "path": "blocks/social-content/reply-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { MessageCircle } from \"lucide-react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  ContentCard,\n  ContentCardAction,\n  ContentCardBody,\n  ContentCardFooter,\n} from \"@/registry/default/ui/content-card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\nconst ReplyCard = ({\n  author,\n  publishedAt,\n  repliesCount,\n  className,\n  menu,\n  children,\n  onRepliesClick,\n}: {\n  author: {\n    did: string;\n    avatarSrc?: string;\n    name?: string;\n  };\n  publishedAt: string;\n  repliesCount: number;\n  menu?: {\n    trigger: React.ReactNode;\n    items: {\n      content: React.ReactNode;\n      className?: string;\n      onClick?: () => void;\n    }[];\n  };\n  className?: string;\n  children: React.ReactNode;\n  onRepliesClick?: () => void;\n}) => {\n  return (\n    <ContentCard\n      author={author}\n      publishedAt={publishedAt}\n      className={className}\n    >\n      <ContentCardAction>\n        {menu && (\n          <DropdownMenu>\n            <DropdownMenuTrigger>{menu.trigger}</DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {menu?.items.map(({ content, className, onClick }, index) => (\n                <DropdownMenuItem\n                  key={index}\n                  onClick={onClick}\n                  className={className}\n                >\n                  {content}\n                </DropdownMenuItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        )}\n      </ContentCardAction>\n      <ContentCardBody>{children}</ContentCardBody>\n      <ContentCardFooter className=\"justify-end\">\n        <Button\n          onClick={onRepliesClick}\n          className=\"border-none bg-transparent pr-0\"\n        >\n          <MessageCircle size={16} className=\"text-primary\" />\n          {repliesCount > 0 && (\n            <Typography variant=\"xs\" className=\"font-bold text-primary\">\n              {repliesCount}\n            </Typography>\n          )}\n        </Button>\n      </ContentCardFooter>\n    </ContentCard>\n  );\n};\n\nexport { ReplyCard };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/social-content/reply-resolver.tsx",
      "content": "import * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Ellipsis } from \"lucide-react\";\n\nimport { REPLIES } from \"@/registry/default/blocks/social-content/reply-mock-data\";\nimport {\n  InlineNotification,\n  InlineNotificationDescription,\n  InlineNotificationTitle,\n} from \"@/registry/default/ui/inline-notification\";\n\nimport { ReplyCard } from \"./reply-card\";\nimport { ReplyPreview } from \"./reply-preview\";\n\nconst MAXIMUM_REFLECTION_PREVIEWS = 2;\n\nlet errorThrown = false;\n\nasync function fetchReplyById(\n  replyId: string\n): Promise<(typeof REPLIES)[0] | undefined> {\n  await new Promise((resolve) => setTimeout(resolve, 300));\n\n  if (errorThrown && Math.random() < 0.5) {\n    errorThrown = true;\n    throw new Error(\"Failed to fetch reply data\");\n  }\n\n  return REPLIES.find((reply) => reply.id === replyId);\n}\n\nfunction ReplyResolver({\n  replyId,\n  className,\n}: {\n  replyId: string;\n  className?: string;\n}) {\n  const { data: reply, status } = useQuery({\n    queryKey: [\"reply\", replyId],\n    queryFn: async () => fetchReplyById(replyId),\n    enabled: !!replyId,\n  });\n\n  if (status === \"pending\") return <p>Loading reply...</p>;\n  if (status === \"error\")\n    return (\n      <InlineNotification variant=\"destructive\" className=\"bg-nested-card\">\n        <InlineNotificationTitle>\n          Content couldn’t be loaded correctly\n        </InlineNotificationTitle>\n        <InlineNotificationDescription>\n          Unable to load content. Please try again later.\n        </InlineNotificationDescription>\n      </InlineNotification>\n    );\n\n  if (!reply) return null;\n\n  const { content, ...replyProps } = reply;\n  const repliesToReply = reply.replies\n    ?.slice(0, MAXIMUM_REFLECTION_PREVIEWS)\n    .map((replyId) => replyId);\n\n  return (\n    <>\n      <ReplyCard\n        {...replyProps}\n        menu={{\n          trigger: (\n            <Ellipsis\n              size={20}\n              className=\"text-primary cursor-pointer hover:text-muted\"\n            />\n          ),\n          items: [\n            { content: \"Flag\", onClick: () => console.log(\"flag\") },\n            {\n              content: \"Delete\",\n              onClick: () => console.log(\"delete\"),\n            },\n            { content: \"Edit\", onClick: () => console.log(\"edit\") },\n          ],\n        }}\n        className={className}\n      >\n        {content}\n      </ReplyCard>\n\n      {repliesToReply?.map((replyId) => (\n        <ReplyPreview\n          key={replyId}\n          replyId={replyId}\n          onRepliesClick={() => console.log(\"Not implemented\")}\n        />\n      ))}\n      {/* TODO - add load more buttons */}\n    </>\n  );\n}\n\nexport { ReplyResolver, fetchReplyById };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/social-content/reply-preview.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ReplyCard } from \"@/registry/default/blocks/social-content/reply-card\";\nimport { REPLIES } from \"@/registry/default/blocks/social-content/reply-mock-data\";\nimport {\n  InlineNotification,\n  InlineNotificationDescription,\n  InlineNotificationTitle,\n} from \"@/registry/default/ui/inline-notification\";\n\ntype ReplyPreviewProps = {\n  className?: string;\n  replyId: string;\n  onRepliesClick: () => void;\n};\n\nlet errorThrown = false;\n\nasync function fetchReplyById(\n  replyId: string\n): Promise<(typeof REPLIES)[0] | undefined> {\n  await new Promise((resolve) => setTimeout(resolve, 300));\n\n  if (errorThrown && Math.random() < 0.5) {\n    errorThrown = true;\n    throw new Error(\"Failed to fetch reply data\");\n  }\n\n  return REPLIES.find((reply) => reply.id === replyId);\n}\n\nconst ReplyPreview = ({\n  className,\n  replyId,\n  onRepliesClick,\n}: ReplyPreviewProps) => {\n  const { data: reply, status } = useQuery({\n    queryKey: [\"reply\", replyId],\n    queryFn: async () => fetchReplyById(replyId),\n    enabled: !!replyId,\n  });\n\n  if (status === \"pending\") return <p>Loading reply...</p>;\n  if (status === \"error\")\n    return (\n      <InlineNotification variant=\"destructive\" className=\"bg-nested-card\">\n        <InlineNotificationTitle>\n          Content couldn’t be loaded correctly\n        </InlineNotificationTitle>\n        <InlineNotificationDescription>\n          Unable to load content. Please try again later.\n        </InlineNotificationDescription>\n      </InlineNotification>\n    );\n\n  if (!reply) return null;\n\n  const { content, ...replyProps } = reply;\n\n  return (\n    <div\n      className={cn(\"border-x border-border pl-8 bg-card last:pb-2\", className)}\n    >\n      <div className=\"border-l border-primary\">\n        <ReplyCard\n          className={cn(\"rounded-none border-x-0 border-l border-y-0\")}\n          onRepliesClick={onRepliesClick}\n          {...replyProps}\n        >\n          {content}\n        </ReplyCard>\n      </div>\n    </div>\n  );\n};\n\nexport { ReplyPreview };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/social-content/reply-editor.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport {\n  ProfileAvatar,\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n} from \"@/registry/default/ui/profile-avatar\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Textarea } from \"@/registry/default/ui/textarea\";\n\ninterface ReplyEditorProps {\n  onReplyClick?: (content: string) => void;\n  avatarSrc: string;\n}\n\nfunction ReplyEditor({ onReplyClick, avatarSrc }: ReplyEditorProps) {\n  const [content, setContent] = React.useState(\"\");\n\n  const handleReplyClick = () => {\n    if (content && onReplyClick) {\n      onReplyClick(content);\n      setContent(\"\");\n    }\n  };\n\n  return (\n    <Stack direction=\"column\" spacing={4} className=\"w-full relative\">\n      <Textarea\n        placeholder=\"My thoughts on this are...\"\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        rows={1}\n        className=\"pl-12 pr-24 h-8 py-5 focus:min-h-[90px] overflow-auto resize-none transition-all duration-200\"\n      />\n      <ProfileAvatar className=\"absolute top-4 left-2\" size=\"md\">\n        <ProfileAvatarImage src={avatarSrc} />\n        <ProfileAvatarFallback />\n      </ProfileAvatar>\n      <Button\n        onClick={handleReplyClick}\n        disabled={!content}\n        className=\"absolute bottom-3 right-2\"\n      >\n        Reply\n      </Button>\n    </Stack>\n  );\n}\n\nexport { ReplyEditor };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/social-content/reply-mock-data.ts",
      "content": "import { ReplyCard } from \"@/registry/default/blocks/social-content/reply-card\";\n\ninterface MockPost\n  extends Omit<React.ComponentProps<typeof ReplyCard>, \"children\"> {\n  id: string;\n  content: string;\n}\n\nconst REPLIES_TO_REPLY: string[] = [\"r00000000007\", \"r00000000008\"];\n\nconst REPLIES: (MockPost & {\n  replies?: string[];\n})[] = [\n  {\n    id: \"r00000000001\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"TeddythePug\",\n    },\n    content:\n      \"Tobi, you’re not drinking coffee—you’re fueling a NASA rocket launch. 🚀☕️\",\n    publishedAt: \"45 mins ago\",\n    repliesCount: 0,\n  },\n  {\n    id: \"r00000000002\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"HangryMeow\",\n    },\n    content:\n      \"5 cups a day? That’s not a coffee habit, that’s a legally binding relationship. Do you and coffee have anniversary plans? 😂\",\n    publishedAt: \"30 mins ago\",\n    repliesCount: REPLIES_TO_REPLY.length,\n\n    replies: REPLIES_TO_REPLY,\n  },\n  {\n    id: \"r00000000003\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"HangryMeow\",\n    },\n    content: \"This is NSFW.\",\n    publishedAt: \"30 mins ago\",\n    repliesCount: 1,\n  },\n  {\n    id: \"r00000000004\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"HangryMeow\",\n    },\n    content:\n      \"5 cups a day? That’s not a coffee habit, that’s a legally binding relationship. Do you and coffee have anniversary plans? 😂\",\n    publishedAt: \"30 mins ago\",\n    repliesCount: 2,\n  },\n  {\n    id: \"r00000000005\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content:\n      \"Tobi, you’re not drinking coffee—you’re fueling a NASA rocket launch. 🚀☕️\",\n    publishedAt: \"5 mins ago\",\n    repliesCount: 0,\n  },\n  {\n    id: \"r00000000006\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content: \"At this point, coffee and I are practically married 😅\",\n    publishedAt: \"5 mins ago\",\n    repliesCount: 0,\n  },\n  {\n    id: \"r00000000007\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content: \"Haha very funny.\",\n    publishedAt: \"5 mins ago\",\n\n    repliesCount: 0,\n  },\n  {\n    id: \"r00000000008\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content: \"At this point, coffee and I are practically married 😅\",\n    publishedAt: \"5 mins ago\",\n\n    repliesCount: 0,\n  },\n];\n\nexport { REPLIES };\n",
      "type": "registry:file",
      "target": "app/reply/mock-data.ts"
    },
    {
      "path": "lib/format-relative-time.ts",
      "content": "export function formatRelativeTime(isoDate: string): string {\n  const now = new Date();\n  const pastDate = new Date(isoDate);\n  const diffInSeconds = Math.floor((now.getTime() - pastDate.getTime()) / 1000);\n\n  const timeUnits = [\n    { limit: 60, divisor: 1, suffix: \"s\" },\n    { limit: 3600, divisor: 60, suffix: \"m\" },\n    { limit: 86400, divisor: 3600, suffix: \"h\" },\n    { limit: 2592000, divisor: 86400, suffix: \"d\" },\n    { limit: 31536000, divisor: 2592000, suffix: \"mo\" },\n  ];\n\n  for (const unit of timeUnits) {\n    if (diffInSeconds < unit.limit) {\n      return `${Math.floor(diffInSeconds / unit.divisor)}${unit.suffix} ago`;\n    }\n  }\n\n  return `${Math.floor(diffInSeconds / 31536000)}y ago`;\n}\n",
      "type": "registry:lib"
    }
  ],
  "categories": [
    "social-content"
  ]
}