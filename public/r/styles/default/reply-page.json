{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reply-page",
  "type": "registry:block",
  "description": "A reply post page with reply editor and replies",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar-button.json",
    "https://akasha-ui.pages.dev/r/styles/default/card.json",
    "https://akasha-ui.pages.dev/r/styles/default/stack.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json",
    "https://akasha-ui.pages.dev/r/styles/default/icon-container.json",
    "https://akasha-ui.pages.dev/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "blocks/reply-page/page.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Fragment } from \"react\";\nimport { Ellipsis } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport {\n  InfiniteScroll,\n  InfiniteScrollList,\n} from \"@/registry/default/ui/infinite-scroll\";\n\nimport { ReplyCard } from \"../reply-card\";\nimport { ReplyEditor } from \"../reply-editor\";\nimport { ReplyPreview } from \"../reply-preview\";\nimport { REPLIES_TO_REPLY, REPLY } from \"./mock-data\";\n\nconst MAXIMUM_REFLECTION_PREVIEWS = 2;\n\nexport default function Page() {\n  const { content, ...replyProps } = REPLY;\n  return (\n    <div className=\"p-4 h-full\">\n      <ReplyCard\n        {...replyProps}\n        onRepliesClick={() => {\n          console.log(\"Not implemented\");\n        }}\n        className=\"rounded-t-3xl border-t\"\n        menu={{\n          trigger: (\n            <Ellipsis\n              size={20}\n              className=\"text-primary cursor-pointer hover:text-muted\"\n            />\n          ),\n          items: [\n            { content: \"Flag\", onClick: () => console.log(\"flag\") },\n            {\n              content: \"Delete\",\n              className: \"text-destructive\",\n              onClick: () => console.log(\"delete\"),\n            },\n            { content: \"Edit\", onClick: () => console.log(\"edit\") },\n          ],\n        }}\n      >\n        {content}\n      </ReplyCard>\n      <Card className=\"border-t-0 p-2 rounded-none\" key={1}>\n        <ReplyEditor\n          avatarSrc={\"https://github.com/akashaorg.png\"}\n          onReplyClick={() => {\n            console.log(\"Not implemented\");\n          }}\n        />\n      </Card>\n      <InfiniteScroll\n        count={REPLIES_TO_REPLY.length}\n        estimatedHeight={220}\n        overScan={5}\n        gap={0}\n        scrollElementType=\"window\"\n      >\n        <InfiniteScrollList>\n          {(index) => {\n            const reply = REPLIES_TO_REPLY[index];\n            const { content, id, ...replyProps } = reply;\n            const repliesToReply = reply.replies;\n\n            return (\n              <Fragment key={id}>\n                <ReplyCard\n                  {...replyProps}\n                  menu={{\n                    trigger: (\n                      <Ellipsis\n                        size={20}\n                        className=\"text-primary cursor-pointer hover:text-muted\"\n                      />\n                    ),\n                    items: [\n                      { content: \"Flag\", onClick: () => console.log(\"flag\") },\n                      {\n                        content: \"Delete\",\n                        onClick: () => console.log(\"delete\"),\n                      },\n                      { content: \"Edit\", onClick: () => console.log(\"edit\") },\n                    ],\n                  }}\n                  className={cn(\n                    index === REPLIES_TO_REPLY.length - 1 && \"rounded-b-3xl\"\n                  )}\n                >\n                  {content}\n                </ReplyCard>\n\n                {repliesToReply\n                  ?.slice(0, MAXIMUM_REFLECTION_PREVIEWS)\n                  .map(({ content, id, ...replyProps }) => (\n                    <ReplyPreview\n                      {...replyProps}\n                      key={id}\n                      onRepliesClick={() => {\n                        console.log(\"Clicked on replies button\");\n                      }}\n                    >\n                      {content}\n                    </ReplyPreview>\n                  ))}\n                {/* TODO - add load more buttons */}\n              </Fragment>\n            );\n          }}\n        </InfiniteScrollList>\n      </InfiniteScroll>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/post/page.tsx"
    },
    {
      "path": "blocks/content-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { MessageCircle, SatelliteDish } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { NsfwWarning } from \"@/registry/default/blocks/nsfw-warning\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/registry/default/ui/dropdown-menu\";\nimport { IconContainer } from \"@/registry/default/ui/icon-container\";\nimport {\n  ProfileAvatarButton,\n  ProfileAvatarButtonAvatar,\n  ProfileAvatarButtonAvatarFallback,\n  ProfileAvatarButtonAvatarImage,\n  ProfileDidField,\n  ProfileName,\n} from \"@/registry/default/ui/profile-avatar-button\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\ninterface ContentCardProps {\n  author: {\n    did: string;\n    avatarSrc: string;\n    name: string;\n  };\n  publishedAt: string;\n  repliesCount: number;\n  publishedVia?: string;\n  menu?: {\n    trigger: React.ReactNode;\n    items: {\n      content: React.ReactNode;\n      className?: string;\n      onClick?: () => void;\n    }[];\n  };\n  tags?: string[];\n  nsfw?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  onRepliesClick?: () => void;\n}\n\nconst ContentCard = ({\n  author,\n  publishedAt,\n  tags,\n  publishedVia,\n  repliesCount,\n  className,\n  nsfw,\n  menu,\n  children,\n  onRepliesClick,\n}: ContentCardProps) => {\n  const [showNsfw, setShowNsfw] = React.useState(nsfw);\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <Stack direction=\"column\" spacing={4}>\n        <Stack direction=\"row\" justifyContent={\"between\"}>\n          <ProfileAvatarButton profileDID={author.did}>\n            <ProfileAvatarButtonAvatar>\n              <ProfileAvatarButtonAvatarImage\n                src={author.avatarSrc}\n                alt={`@${author.name}`}\n              />\n              <ProfileAvatarButtonAvatarFallback />\n            </ProfileAvatarButtonAvatar>\n            <ProfileName>\n              {author.name}{\" \"}\n              <Typography\n                variant=\"xs\"\n                className=\"text-muted-foreground font-normal\"\n              >\n                Â· {publishedAt}\n              </Typography>\n            </ProfileName>\n            <ProfileDidField />\n          </ProfileAvatarButton>\n          {menu && (\n            <DropdownMenu>\n              <DropdownMenuTrigger>{menu.trigger}</DropdownMenuTrigger>\n              <DropdownMenuContent>\n                {menu?.items.map(({ content, className, onClick }, index) => (\n                  <DropdownMenuItem\n                    key={index}\n                    onClick={onClick}\n                    className={className}\n                  >\n                    {content}\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </Stack>\n\n        {showNsfw ? (\n          <NsfwWarning\n            onShowClick={() => setShowNsfw(!showNsfw)}\n            title=\"Content Warning: Not Safe Work\"\n            description=\"The post author marked this post as NSFW\"\n          />\n        ) : (\n          children\n        )}\n\n        {tags && (\n          <Stack direction=\"row\" spacing={2}>\n            {tags.map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"border-secondary\">\n                <Typography variant=\"xs\" className=\"font-normal\">\n                  {tag}\n                </Typography>\n              </Badge>\n            ))}\n          </Stack>\n        )}\n        <Stack direction=\"row\" spacing={2} justifyContent=\"between\">\n          <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n            {publishedVia && (\n              <>\n                <IconContainer size=\"xs\" variant=\"round\">\n                  <SatelliteDish className=\"text-primary\" size={12} />\n                </IconContainer>\n\n                <Typography variant=\"xs\" className=\"text-muted-foreground\">\n                  Published via {publishedVia}\n                </Typography>\n              </>\n            )}\n          </Stack>\n\n          <Button\n            asChild\n            onClick={onRepliesClick}\n            className=\"border-none bg-transparent pr-0\"\n          >\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n              <MessageCircle size={16} className=\"text-primary\" />\n              {repliesCount > 0 && (\n                <Typography variant=\"xs\" className=\"font-bold text-primary\">\n                  {repliesCount}\n                </Typography>\n              )}\n            </Stack>\n          </Button>\n        </Stack>\n      </Stack>\n    </Card>\n  );\n};\n\nexport { ContentCard };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/reply-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { ContentCard } from \"./content-card\";\n\ntype ReplyCardProps = Omit<\n  React.ComponentProps<typeof ContentCard>,\n  \"tags\" | \"publishedVia\"\n>;\n\nconst ReplyCard = ({ className, ...props }: ReplyCardProps) => {\n  return (\n    <ContentCard\n      {...props}\n      className={cn(\"border-t-0 rounded-none\", className)}\n    />\n  );\n};\n\nexport { ReplyCard };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/nsfw-warning.tsx",
      "content": "import * as React from \"react\";\nimport { EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Card } from \"@/registry/default/ui/card\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\nconst NsfwWarning = ({\n  className,\n  title,\n  description,\n  onShowClick,\n  ...props\n}: React.ComponentProps<typeof Card> & {\n  title: string;\n  description: string;\n  onShowClick?: () => void;\n}) => {\n  return (\n    <Card\n      className={cn(\"border-border pb-0 bg-nested-card\", className)}\n      {...props}\n    >\n      <Stack direction=\"column\" spacing={2} alignItems=\"center\">\n        <EyeOff size={20} className=\"text-destructive\" />\n        <Typography variant=\"sm\" className=\"font-bold\">\n          {title}\n        </Typography>\n        <Typography variant=\"sm\">{description}</Typography>\n        <Button variant=\"link\" className=\"px-8\" onClick={onShowClick}>\n          Show\n        </Button>\n      </Stack>\n    </Card>\n  );\n};\n\nexport { NsfwWarning };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/reply-editor.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Textarea } from \"@/registry/default/ui/textarea\";\n\nimport {\n  ProfileAvatar,\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n} from \"../ui/profile-avatar\";\n\ninterface ReplyEditorProps {\n  onReplyClick?: (content: string) => void;\n  avatarSrc: string;\n}\n\nfunction ReplyEditor({ onReplyClick, avatarSrc }: ReplyEditorProps) {\n  const [content, setContent] = React.useState(\"\");\n\n  const handleReplyClick = () => {\n    if (content.trim() && onReplyClick) {\n      onReplyClick(content);\n      setContent(\"\");\n    }\n  };\n\n  return (\n    <Stack direction=\"column\" spacing={4} className=\"w-full relative\">\n      <Textarea\n        placeholder=\"My thoughts on this are...\"\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        rows={1}\n        className=\"pl-12 pr-24 h-8 py-5 focus:min-h-[90px] overflow-auto resize-none transition-all duration-200\"\n      />\n      <ProfileAvatar className=\"absolute top-4 left-2\" size=\"md\">\n        <ProfileAvatarImage src={avatarSrc} />\n        <ProfileAvatarFallback />\n      </ProfileAvatar>\n      <Button\n        onClick={handleReplyClick}\n        disabled={!content.trim()}\n        className=\"absolute bottom-3 right-2\"\n      >\n        Reply\n      </Button>\n    </Stack>\n  );\n}\n\nexport { ReplyEditor };\n",
      "type": "registry:component"
    },
    {
      "path": "blocks/reply-page/mock-data.ts",
      "content": "import * as React from \"react\";\n\nimport { ReplyCard } from \"../reply-card\";\n\ninterface MockReply\n  extends Omit<React.ComponentProps<typeof ReplyCard>, \"children\"> {\n  id: string;\n  content: string;\n}\n\nconst REPLY: MockReply = {\n  id: \"post1\",\n  author: {\n    did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n    avatarSrc: \"https://github.com/akashaorg.png\",\n    name: \"HangryMeow\",\n  },\n  content:\n    \"5 cups a day? Thatâs not a coffee habit, thatâs a legally binding relationship. Do you and coffee have anniversary plans? ð\",\n  publishedAt: \"30 mins ago\",\n  repliesCount: 2,\n};\n\nconst REPLIES_TO_REPLY: (MockReply & {\n  replies?: MockReply[];\n})[] = [\n  {\n    id: \"reply1\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content:\n      \"Tobi, youâre not drinking coffeeâyouâre fueling a NASA rocket launch. ðâï¸\",\n    publishedAt: \"5 mins ago\",\n    repliesCount: 0,\n    nsfw: false,\n  },\n  {\n    id: \"reply2\",\n    author: {\n      did: \"did:pkh:eip155:11155111:0x8a022905463998860516390fb27548479a098b95\",\n      avatarSrc: \"https://github.com/akashaorg.png\",\n      name: \"CoffeeLover\",\n    },\n    content: \"At this point, coffee and I are practically married ð\",\n    publishedAt: \"5 mins ago\",\n    repliesCount: 0,\n    nsfw: false,\n  },\n];\n\nexport { REPLY, REPLIES_TO_REPLY };\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "reply-page"
  ]
}