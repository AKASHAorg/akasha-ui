{
  "name": "input",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/input.tsx",
      "content": "import * as React from \"react\";\nimport { Search, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface InputProps extends React.ComponentProps<\"input\"> {\n  className?: string;\n  type?: string;\n}\n\nfunction Input({ className, type, defaultValue, value, ...props }: InputProps) {\n  const [internalValue, setInternalValue] = React.useState(defaultValue || \"\");\n  const [isFocused, setIsFocused] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const isControlled = value !== undefined;\n\n  const handleClear = React.useCallback(\n    (e: React.MouseEvent<SVGSVGElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      if (inputRef.current) {\n        setInternalValue(\"\");\n        inputRef.current.value = \"\";\n        inputRef.current.dispatchEvent(new Event(\"input\", { bubbles: true }));\n        inputRef.current.focus();\n      }\n    },\n    []\n  );\n\n  const handleChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!isControlled) {\n        setInternalValue(e.target.value);\n      }\n      props.onChange?.(e);\n    },\n    [isControlled, props.onChange]\n  );\n\n  const handleFocus = React.useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(true);\n      props.onFocus?.(e);\n    },\n    [props.onFocus]\n  );\n\n  const handleBlur = React.useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(false);\n      props.onBlur?.(e);\n    },\n    [props.onBlur]\n  );\n\n  const showClearButton =\n    type === \"search\" && isFocused && (internalValue || value);\n  const showSearchIcon = type === \"search\" && !showClearButton;\n\n  return (\n    <div className=\"relative\">\n      <input\n        ref={inputRef}\n        value={isControlled ? value : internalValue}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        type={type}\n        data-slot=\"input\"\n        className={cn(\n          \"border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 aria-invalid:outline-destructive/60 dark:aria-invalid:outline-destructive dark:aria-invalid:ring-destructive/40 aria-invalid:ring-destructive/20 aria-invalid:border-destructive/60 dark:aria-invalid:border-destructive flex h-10 w-full min-w-0 rounded-md border bg-card px-3 py-1 text-base shadow-xs transition-[color,box-shadow] file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:ring-4 focus-visible:outline-1 disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:focus-visible:ring-[3px] aria-invalid:focus-visible:outline-none md:text-sm dark:aria-invalid:focus-visible:ring-4\",\n          className\n        )}\n        {...props}\n      />\n      {showClearButton && (\n        <X\n          onMouseDown={handleClear}\n          size={24}\n          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground ml-2 cursor-pointer hover:text-foreground transition-colors\"\n        />\n      )}\n      {showSearchIcon && (\n        <Search\n          size={24}\n          className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground bg-card\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport { Input };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}