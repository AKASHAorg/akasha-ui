{
  "name": "typography",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "akasha-ui/typography.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst typographyVariants = cva(\"text-foreground\", {\n  variants: {\n    variant: {\n      h1: \"scroll-m-20 text-5xl\tfont-bold\",\n      h2: \"scroll-m-20 text-4xl\tfont-bold\",\n      h3: \"scroll-m-20 text-3xl\tfont-bold\",\n      h4: \"scroll-m-20 text-2xl\tfont-bold\",\n      h5: \"scroll-m-20 text-xl font-bold\",\n      h6: \"scroll-m-20 text-l font-bold\",\n      p: \"text-base\",\n      sm: \"text-sm\",\n      xs: \"text-xs\",\n    },\n  },\n  defaultVariants: {\n    variant: \"p\",\n  },\n});\n\ntype Variant = VariantProps<typeof typographyVariants>[\"variant\"];\n\ntype Heading = \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\";\n\nfunction isHeading(variant: Variant): variant is Heading {\n  return (\n    variant !== null &&\n    variant !== undefined &&\n    [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\"].includes(variant)\n  );\n}\n\nfunction getTag(variant: Variant) {\n  if (isHeading(variant) || variant === \"p\") return variant;\n  if (variant === \"sm\" || variant === \"xs\") return \"small\";\n  return \"div\";\n}\n\nexport interface TypographyProps\n  extends React.ButtonHTMLAttributes<HTMLHeadingElement | HTMLParagraphElement>,\n    VariantProps<typeof typographyVariants> {\n  asChild?: boolean;\n  bold?: boolean;\n}\n\nconst Typography = React.forwardRef<\n  HTMLHeadingElement | HTMLParagraphElement,\n  TypographyProps\n>(({ className, variant, bold, asChild, ...props }, ref) => {\n  const tag = getTag(variant);\n  const Comp = asChild ? Slot : tag;\n\n  return (\n    <Comp\n      className={cn(\n        typographyVariants({ variant, className }),\n        bold && \"font-bold\"\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTypography.displayName = \"Typography\";\n\nexport { Typography, typographyVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}