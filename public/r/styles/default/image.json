{
  "name": "image",
  "type": "registry:ui",
  "files": [
    {
      "path": "akasha-ui/image.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ImageContext = React.createContext<{\n  isLoading: boolean;\n  hasError: boolean;\n  setLoading: (loading: boolean) => void;\n  setError: (error: boolean) => void;\n} | null>(null);\n\nconst useImageContext = () => {\n  const context = React.useContext(ImageContext);\n  if (!context) {\n    throw new Error(\n      \"`useImageContext` must be used within an `ImageRoot` component\"\n    );\n  }\n  return context;\n};\n\nconst ImageRoot = ({ children, ...props }: React.ComponentProps<\"div\">) => {\n  const [isLoading, setLoading] = React.useState(true);\n  const [hasError, setError] = React.useState(false);\n\n  return (\n    <ImageContext.Provider\n      data-slot=\"image-root\"\n      value={{ isLoading, hasError, setLoading, setError }}\n    >\n      <div {...props}>{children}</div>\n    </ImageContext.Provider>\n  );\n};\n\nconst ImageFallback = ({ children }: React.ComponentProps<\"span\">) => {\n  const { hasError } = useImageContext();\n  return hasError ? <span data-slot=\"image-fallback\">{children}</span> : null;\n};\n\nconst DelayLoad: React.FC<{\n  children: React.ReactNode;\n  loadAfter?: number;\n}> = ({ children, loadAfter = 300 }) => {\n  const [show, setShow] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setShow(true);\n    }, loadAfter);\n    return () => clearTimeout(timer);\n  }, [loadAfter]);\n\n  return <>{show ? children : null}</>;\n};\n\nconst Image = ({\n  alt,\n  showLoadingIndicator,\n  className,\n  onLoad,\n  onError,\n  ...props\n}: React.ComponentProps<\"img\"> & {\n  showLoadingIndicator?: boolean;\n}) => {\n  const { setLoading, setError, isLoading, hasError } = useImageContext();\n\n  React.useEffect(() => {\n    setLoading(true);\n  }, [setLoading]);\n\n  return (\n    <>\n      {showLoadingIndicator && isLoading && (\n        <DelayLoad>\n          <div\n            data-slot=\"image-loader\"\n            className={cn(\"flex items-center justify-center\", className)}\n          >\n            <Loader2 className={cn(\"animate-spin text-muted\")} />\n          </div>\n        </DelayLoad>\n      )}\n      {!hasError && (\n        <img\n          data-slot=\"image\"\n          loading=\"lazy\"\n          decoding=\"async\"\n          onLoad={(event) => {\n            setLoading(false);\n            onLoad?.(event);\n          }}\n          onError={(event) => {\n            setError(true);\n            setLoading(false);\n            onError?.(event);\n          }}\n          alt={alt}\n          className={cn(\"object-contain\", className)}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\n\nexport { ImageRoot, ImageFallback, Image };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}