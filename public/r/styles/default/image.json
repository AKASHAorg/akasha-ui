{
  "name": "image",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/image.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ImageContext = React.createContext<{\n  loading: boolean;\n  hasError: boolean;\n  setLoading: (loading: boolean) => void;\n  setError: (error: boolean) => void;\n} | null>(null);\n\nconst useImageContext = () => {\n  const context = React.useContext(ImageContext);\n  if (!context) {\n    throw new Error(\n      \"`useImageContext` must be used within an `ImageRoot` component\"\n    );\n  }\n  return context;\n};\n\nconst ImageRoot = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const [loading, setLoading] = React.useState(true);\n  const [hasError, setError] = React.useState(false);\n\n  return (\n    <ImageContext.Provider value={{ loading, hasError, setLoading, setError }}>\n      <div\n        data-slot=\"image-root\"\n        className={cn(\"relative\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </ImageContext.Provider>\n  );\n};\n\nconst ImageFallback = ({ children }: { children: React.ReactNode }) => {\n  const { hasError } = useImageContext();\n  if (!hasError) return null;\n  return (\n    <div data-slot=\"image-fallback\" className=\"absolute inset-0\">\n      {children}\n    </div>\n  );\n};\n\nconst DelayLoad = ({\n  children,\n  loadAfter = 300,\n}: {\n  children: React.ReactNode;\n  loadAfter?: number;\n}) => {\n  const [show, setShow] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setShow(true), loadAfter);\n    return () => clearTimeout(timer);\n  }, [loadAfter]);\n\n  return show ? <>{children}</> : null;\n};\n\nconst Image = ({\n  alt,\n  showLoadingIndicator,\n  className,\n  onLoad,\n  onError,\n  ...props\n}: React.ComponentProps<\"img\"> & {\n  showLoadingIndicator?: boolean;\n}) => {\n  const { setLoading, setError, loading, hasError } = useImageContext();\n\n  React.useEffect(() => {\n    setLoading(true);\n  }, [setLoading]);\n\n  if (hasError) return null;\n\n  return (\n    <>\n      {showLoadingIndicator && loading && (\n        <DelayLoad>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n          </div>\n        </DelayLoad>\n      )}\n      <img\n        data-slot=\"image\"\n        className={cn(\"h-full w-full object-cover\", className)}\n        alt={alt}\n        loading=\"lazy\"\n        decoding=\"async\"\n        onLoad={(event) => {\n          setLoading(false);\n          onLoad?.(event);\n        }}\n        onError={(event) => {\n          setError(true);\n          setLoading(false);\n          onError?.(event);\n        }}\n        {...props}\n      />\n    </>\n  );\n};\n\nexport { Image, ImageRoot, ImageFallback };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}