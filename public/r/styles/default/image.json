{
  "name": "image",
  "type": "registry:ui",
  "dependencies": [
    "next"
  ],
  "files": [
    {
      "path": "akasha-ui/image.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ImageContext = React.createContext<{\n  isLoading: boolean;\n  hasError: boolean;\n  setLoading: (loading: boolean) => void;\n  setError: (error: boolean) => void;\n} | null>(null);\n\nconst useImageContext = () => {\n  const context = React.useContext(ImageContext);\n  if (!context) {\n    throw new Error(\n      \"`useImageContext` must be used within an `ImageRoot` component\"\n    );\n  }\n  return context;\n};\n\nconst ImageRoot = ({ children }: { children: React.ReactNode }) => {\n  const [isLoading, setLoading] = React.useState(true);\n  const [hasError, setError] = React.useState(false);\n\n  return (\n    <ImageContext.Provider\n      value={{ isLoading, hasError, setLoading, setError }}\n    >\n      {children}\n    </ImageContext.Provider>\n  );\n};\n\nconst ImageFallback = React.forwardRef<\n  HTMLSpanElement,\n  React.ButtonHTMLAttributes<HTMLSpanElement>\n>(({ children }, ref) => {\n  const { hasError } = useImageContext();\n  return hasError ? <span ref={ref}>{children}</span> : null;\n});\n\ninterface DelayLoadProps {\n  children: React.ReactNode;\n  loadAfter?: number;\n}\n\nexport const DelayLoad: React.FC<DelayLoadProps> = ({\n  children,\n  loadAfter = 300,\n}) => {\n  const [show, setShow] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setShow(true);\n    }, loadAfter);\n    return () => clearTimeout(timer);\n  }, [loadAfter]);\n\n  return <>{show ? children : null}</>;\n};\n\ninterface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  showLoadingIndicator?: boolean;\n}\n\nconst Image = React.forwardRef<HTMLImageElement, ImageProps>(\n  ({ showLoadingIndicator, className, onLoad, onError, ...props }, ref) => {\n    const { setLoading, setError, isLoading, hasError } = useImageContext();\n\n    React.useEffect(() => {\n      setLoading(true);\n    }, [setLoading]);\n\n    return (\n      <div ref={ref} className={cn(\"relative\", className)}>\n        {showLoadingIndicator && isLoading && (\n          <DelayLoad>\n            <div\n              className={cn(\n                \"flex items-center justify justify-center\",\n                className\n              )}\n            >\n              <Loader2 className={cn(\"animate-spin text-muted\")} />\n            </div>\n          </DelayLoad>\n        )}\n        {!hasError && (\n          <img\n            ref={ref}\n            loading=\"lazy\"\n            decoding=\"async\"\n            onLoad={(event) => {\n              setLoading(false);\n              onLoad?.(event);\n            }}\n            onError={(event) => {\n              setError(true);\n              setLoading(false);\n              onError?.(event);\n            }}\n            className={cn(\"object-contain\", className)}\n            {...props}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\nexport { ImageRoot, ImageFallback, Image };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}