{
  "name": "extension-card",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "badge",
    "https://akasha-ui.pages.dev/r/styles/default/extension-avatar.json",
    "https://akasha-ui.pages.dev/r/styles/default/extension-type-icon.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json"
  ],
  "files": [
    {
      "path": "ui/extension-card.tsx",
      "content": "import * as React from \"react\";\nimport { Check } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ExtensionType } from \"@/registry/default/types/extension-type\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport {\n  ExtensionAvatar,\n  ExtensionAvatarFallback,\n  ExtensionAvatarImage,\n} from \"@/registry/default/ui/extension-avatar\";\nimport { ExtensionTypeIcon } from \"@/registry/default/ui/extension-type-icon\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\nconst ExtensionCardContext = React.createContext<{\n  extensionId?: string;\n  extensionType?: ExtensionType;\n} | null>(null);\n\nconst useExtensionCardContext = () => {\n  const context = React.useContext(ExtensionCardContext);\n  if (!context) {\n    throw new Error(\n      \"`useExtensionCardContext` must be used within `ExtensionCard`\"\n    );\n  }\n  return context;\n};\n\nconst ExtensionCard = ({\n  extensionId = \"\",\n  extensionType = ExtensionType.App,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  extensionId?: string;\n  extensionType?: ExtensionType;\n}) => {\n  return (\n    <ExtensionCardContext.Provider value={{ extensionId, extensionType }}>\n      <div\n        data-slot=\"extension-card\"\n        className={cn(\"grid grid-cols-[60px_auto_1fr] gap-2\", className)}\n        {...props}\n      />\n    </ExtensionCardContext.Provider>\n  );\n};\n\nconst ExtensionCardAvatar = (\n  props: Omit<React.ComponentProps<typeof ExtensionAvatar>, \"extensionType\">\n) => {\n  const { extensionId, extensionType } = useExtensionCardContext();\n\n  return (\n    <ExtensionAvatar\n      data-slot=\"extension-card-avatar\"\n      extensionId={extensionId}\n      size=\"lg\"\n      extensionType={extensionType}\n      {...props}\n    />\n  );\n};\n\nconst ExtensionCardAvatarFallback = (\n  props: React.ComponentProps<typeof ExtensionAvatarFallback>\n) => <ExtensionAvatarFallback {...props} />;\n\nconst ExtensionCardAvatarImage = (\n  props: React.ComponentProps<typeof ExtensionAvatarImage>\n) => <ExtensionAvatarImage {...props} />;\n\nconst ExtensionCardContent = ({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  return (\n    <div\n      data-slot=\"extension-card-content\"\n      className={cn(\"flex flex-col gap-1 min-w-0\", className)}\n      {...props}\n    />\n  );\n};\n\nconst ExtensionCardName = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const { extensionType } = useExtensionCardContext();\n  return (\n    <div\n      data-slot=\"extension-card-name-wrapper\"\n      className={cn(\"flex items-center gap-1\", className)}\n      {...props}\n    >\n      <Typography data-slot=\"extension-card-name\" variant=\"sm\" bold>\n        {children}\n      </Typography>\n      <ExtensionTypeIcon extensionType={extensionType} />\n    </div>\n  );\n};\n\nconst ExtensionCardDescription = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof Typography>) => {\n  return (\n    <Typography\n      variant=\"xs\"\n      data-slot=\"extension-card-description\"\n      className={cn(\n        \"text-muted-foreground line-clamp-1 truncate block\",\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nconst ExtensionCardActionContext = React.createContext<{\n  active?: boolean;\n} | null>(null);\n\nconst useExtensionCardActionContext = () => {\n  const context = React.useContext(ExtensionCardActionContext);\n  if (!context) {\n    throw new Error(\n      \"`useExtensionCardActionContext` must be used within `ExtensionCardAction`\"\n    );\n  }\n  return context;\n};\n\nconst ExtensionCardAction = ({\n  active,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & { active?: boolean }) => {\n  return (\n    <ExtensionCardActionContext.Provider value={{ active }}>\n      <div\n        data-slot=\"extension-card-action\"\n        className={cn(\"self-center text-end min-w-20 ml-5\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </ExtensionCardActionContext.Provider>\n  );\n};\n\nconst ExtensionCardActionInactive = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof Badge>) => {\n  const { active } = useExtensionCardActionContext();\n  return (\n    !active && (\n      <Badge\n        data-slot=\"extension-card-action-inactive\"\n        variant=\"outline\"\n        className={cn(\"cursor-pointer\", className)}\n        {...props}\n      />\n    )\n  );\n};\n\nconst ExtensionCardActionActive = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Badge>) => {\n  const { active } = useExtensionCardActionContext();\n  return (\n    active && (\n      <Badge\n        data-slot=\"extension-card-action-active\"\n        variant=\"secondary\"\n        className={cn(\"[&_svg]:size-4 cursor-pointer\", className)}\n        {...props}\n      >\n        <Check />\n        {children}\n      </Badge>\n    )\n  );\n};\n\nexport {\n  ExtensionCard,\n  ExtensionCardAvatar,\n  ExtensionCardAvatarFallback,\n  ExtensionCardAvatarImage,\n  ExtensionCardContent,\n  ExtensionCardName,\n  ExtensionCardDescription,\n  ExtensionCardAction,\n  ExtensionCardActionInactive,\n  ExtensionCardActionActive,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "types/extension-type.ts",
      "content": "export enum ExtensionType {\n  App = \"APP\",\n  Other = \"OTHER\",\n  Plugin = \"PLUGIN\",\n  Widget = \"WIDGET\",\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}