{
  "name": "copy-to-clipboard",
  "type": "registry:ui",
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "akasha-ui/copy-to-clipboard.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\";\n\ninterface CopyToClipboardProps {\n  textToCopy: string;\n  ctaText?: string;\n  successText?: string;\n  resetDuration?: number;\n}\n\nexport default function CopyToClipboard({\n  textToCopy,\n  ctaText = \"Copy to clipboard\",\n  successText = \"Copied\",\n  resetDuration = 5000,\n  children,\n}: React.PropsWithChildren<CopyToClipboardProps>) {\n  const [copied, setCopied] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(textToCopy);\n    setCopied(true);\n    setTimeout(() => setCopied(false), resetDuration);\n  };\n\n  const handleTooltipOpen = () => {\n    setOpen(true);\n  };\n\n  const handleTooltipClose = () => {\n    setOpen(false);\n  };\n\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n\n  const handlePointerDown = (event: { target: EventTarget | null }) => {\n    const target = event.target as Node;\n    // Only clicking outside the trigger closes the tooltip\n    if (!triggerRef.current?.contains(target)) {\n      handleTooltipClose();\n    }\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip open={open}>\n        <TooltipTrigger\n          onClick={copyToClipboard}\n          ref={triggerRef}\n          onMouseEnter={handleTooltipOpen}\n          onMouseLeave={handleTooltipClose}\n        >\n          {children}\n        </TooltipTrigger>\n        <TooltipContent onPointerDownOutside={handlePointerDown}>\n          {copied ? successText : ctaText}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}