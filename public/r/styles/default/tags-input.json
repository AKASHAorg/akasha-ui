{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tags-input",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/badge.json",
    "https://akasha-ui.pages.dev/r/styles/default/input.json"
  ],
  "files": [
    {
      "path": "ui/tags-input.tsx",
      "content": "import * as React from \"react\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/registry/default/ui/badge\";\nimport { Input } from \"@/registry/default/ui/input\";\n\ntype Separator = \"Space\" | \"Enter\" | \"Comma\";\n\ninterface TagsInputContextProps {\n  tags: Set<string>;\n  registerTag: (tag: string) => void;\n  handleRemove: (tag: string) => void;\n}\n\nconst TagsInputContext = React.createContext<TagsInputContextProps | null>(\n  null\n);\n\nfunction useTagsInputContext() {\n  const context = React.useContext(TagsInputContext);\n  if (!context) {\n    throw new Error(\"`useTagsInputContext` must be used within `TagsInput`\");\n  }\n  return context;\n}\n\nfunction isSeparator(code: string, separators: Separator[]): code is Separator {\n  return !!separators.find((separator) => separator === code);\n}\n\nconst TagsInputList = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const { tags, handleRemove } = useTagsInputContext();\n\n  //remove unmounted TagsInputItem's from local state\n  React.useEffect(() => {\n    const childrenArray = React.Children.toArray(children).filter(\n      (\n        child\n      ): child is React.ReactElement<\n        React.ComponentProps<typeof TagsInputItem>\n      > => React.isValidElement(child) && child.type === TagsInputItem\n    );\n\n    const currentTags = new Set(childrenArray.map((child) => child.props.tag));\n\n    if (currentTags.size < tags.size) {\n      const removedTags = tags.difference(currentTags);\n      removedTags.forEach(handleRemove);\n    }\n  }, [children, handleRemove, tags]);\n\n  return (\n    <div\n      data-slot=\"tags-input-list\"\n      className={cn(\"w-full flex items-center gap-2 flex-wrap\", className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst TagsInputItem = ({\n  tag,\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof Badge> & { tag: string }) => {\n  const { tags, registerTag, handleRemove } = useTagsInputContext();\n\n  React.useEffect(() => {\n    if (!tags.has(tag)) {\n      registerTag(tag);\n    }\n  }, [tag, registerTag, tags]);\n\n  return (\n    <Badge\n      data-slot=\"tags-input-item\"\n      variant=\"outline\"\n      className={cn(\"rounded-full\", className)}\n      {...props}\n    >\n      {React.Children.count(children) ? children : tag}\n      <button type=\"button\" onClick={() => handleRemove(tag)}>\n        <X className=\"cursor-pointer size-4\" />\n      </button>\n    </Badge>\n  );\n};\n\nconst TagsInput = ({\n  ref,\n  separators = [\"Enter\"],\n  className,\n  children,\n  onTagsChange,\n  onChange,\n  onKeyDown,\n  ...props\n}: React.ComponentProps<typeof Input> & {\n  separators?: Separator[];\n  onTagsChange?: (tags: Set<string>) => void;\n}) => {\n  const [tags, setTags] = React.useState<Set<string>>(new Set());\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const registerTag = (tag: string) => {\n    setTags((prevTags) => new Set([...prevTags, tag]));\n  };\n\n  const handleRemove = (tag: string) => {\n    const newTags = new Set(tags);\n    newTags.delete(tag);\n    setTags(newTags);\n    onTagsChange?.(newTags);\n  };\n\n  return (\n    <TagsInputContext.Provider value={{ tags, registerTag, handleRemove }}>\n      <div\n        data-slot=\"tags-input\"\n        className={cn(\"flex flex-col gap-3\", className)}\n      >\n        <Input\n          ref={(node) => {\n            inputRef.current = node;\n            if (typeof ref === \"function\") {\n              ref(node);\n            } else if (ref) {\n              ref.current = node;\n            }\n          }}\n          data-slot=\"tags-input-field\"\n          type=\"search\"\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value);\n            onChange?.(event);\n          }}\n          onKeyDown={(event) => {\n            if (isSeparator(event.code, separators) && inputValue.trim()) {\n              if (event.key === \",\" && separators.includes(\"Comma\")) {\n                event.preventDefault();\n              }\n\n              registerTag(inputValue);\n              onTagsChange?.(new Set([...tags, inputValue]));\n\n              // Clear controlled input via native setter to propagate change event.\n              const input = event.target as HTMLInputElement;\n              Object.getOwnPropertyDescriptor(\n                HTMLInputElement.prototype,\n                \"value\"\n              )?.set?.call(input, \"\");\n\n              input.dispatchEvent(new Event(\"change\", { bubbles: true }));\n              inputRef.current?.blur();\n            }\n\n            onKeyDown?.(event);\n          }}\n          {...props}\n        />\n        {children}\n      </div>\n    </TagsInputContext.Provider>\n  );\n};\n\nexport { TagsInput, TagsInputList, TagsInputItem };\n",
      "type": "registry:ui"
    }
  ]
}