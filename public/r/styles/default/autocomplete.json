{
  "name": "autocomplete",
  "type": "registry:ui",
  "dependencies": [
    "cmdk",
    "lucide-react"
  ],
  "registryDependencies": [
    "command",
    "input"
  ],
  "files": [
    {
      "path": "akasha-ui/autocomplete.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Check, Loader2, Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Input } from \"@/registry/default/ui/input\";\n\nexport type Option = Record<\"value\" | \"label\", string>;\n\ntype AutoCompleteProps = {\n  options: Option[];\n  emptyMessage: string;\n  loading?: boolean;\n  disabled?: boolean;\n  placeholder?: string;\n  className?: string;\n} & (\n  | {\n      multiple: true;\n      value?: Option[];\n      onValueChange?: (value: Option[]) => void;\n    }\n  | {\n      multiple?: false;\n      value?: Option;\n      onValueChange?: (value: Option) => void;\n    }\n);\n\nconst Autocomplete = ({\n  options,\n  emptyMessage,\n  disabled,\n  loading = false,\n  placeholder,\n  className,\n  ...props\n}: AutoCompleteProps) => {\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [open, setOpen] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n  const [typing, setTyping] = React.useState(false);\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current;\n      if (!input) {\n        return;\n      }\n\n      if (!open) {\n        setOpen(true);\n      }\n\n      if (event.key === \"Enter\" && input.value !== \"\") {\n        const optionToSelect = options.find(\n          (option) => option.label === input.value\n        );\n        if (optionToSelect) {\n          if (props.multiple === true) {\n            const newSelected = [...(props.value || []), optionToSelect];\n            props.onValueChange?.(newSelected);\n          } else {\n            props.onValueChange?.(optionToSelect);\n          }\n        }\n      }\n\n      if (event.key === \"Escape\") {\n        input.blur();\n      }\n    },\n    [open, options, props]\n  );\n\n  const handleBlur = React.useCallback(() => {\n    setOpen(false);\n    if (props.multiple === false) {\n      setValue(props.value?.label || \"\");\n    }\n  }, [props.value, props.multiple]);\n\n  const handleSelectOption = React.useCallback(\n    (selectedOption: Option) => {\n      if (props.multiple === true) {\n        const isSelected = props.value?.some(\n          (option) => option.value === selectedOption.value\n        );\n\n        const newSelected = isSelected\n          ? props.value?.filter(\n              (option) => option.value !== selectedOption.value\n            ) || []\n          : [...(props.value || []), selectedOption];\n\n        setValue(\"\");\n        props.onValueChange?.(newSelected);\n      } else {\n        setValue(selectedOption.label);\n        props.onValueChange?.(selectedOption);\n\n        setTimeout(() => {\n          inputRef?.current?.blur();\n        }, 0);\n      }\n      setTyping(true);\n    },\n    [props]\n  );\n\n  return (\n    <Command\n      data-slot=\"autocomplete\"\n      onKeyDown={handleKeyDown}\n      className={cn(\n        \"flex flex-col gap-2 bg-transparent rounded-lg text-sm **:data-[slot=command-input-wrapper]:hidden overflow-visible\",\n        className\n      )}\n    >\n      <div className=\"flex items-center\">\n        <Input\n          ref={inputRef}\n          value={value}\n          onChange={(event) => {\n            setValue(event.target.value);\n            setTyping(true);\n          }}\n          onBlur={handleBlur}\n          onFocus={() => {\n            setOpen(true);\n            setTyping(false);\n          }}\n          placeholder={placeholder}\n          disabled={disabled}\n        />\n        <Search className=\"-ml-6 size-3 shrink-0 opacity-50\" />\n      </div>\n      <CommandInput value={typing ? value : \"\"} className=\"hidden\" />\n      <div className=\"relative\">\n        <CommandList\n          className={cn(\n            \"absolute animate-in fade-in-0 zoom-in-95 z-10 w-full border rounded-lg bg-card p-1\",\n            { hidden: !open }\n          )}\n        >\n          {!loading && (\n            <CommandEmpty className=\"flex justify-center p-2\">\n              {emptyMessage}\n            </CommandEmpty>\n          )}\n          {loading && (\n            <CommandPrimitive.Loading className=\"flex justify-center p-1\">\n              <Loader2 className=\"animate-spin\" />\n            </CommandPrimitive.Loading>\n          )}\n          {options.length > 0 && !loading && (\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected =\n                  props.multiple === true\n                    ? props.value?.some((item) => item.value === option.value)\n                    : props.value?.value === option.value;\n\n                return (\n                  <CommandItem\n                    key={option.value}\n                    value={option.label}\n                    onMouseDown={(event) => {\n                      event.preventDefault();\n                      event.stopPropagation();\n                    }}\n                    onSelect={() => handleSelectOption(option)}\n                    className={cn(\n                      \"flex w-full items-center gap-2\",\n                      !isSelected ? \"pl-8\" : null\n                    )}\n                  >\n                    {isSelected ? <Check className=\"w-4 text-current\" /> : null}\n                    {option.label}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n          )}\n        </CommandList>\n      </div>\n    </Command>\n  );\n};\n\nexport { Autocomplete };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}