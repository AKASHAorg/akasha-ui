{
  "name": "autocomplete",
  "type": "registry:ui",
  "dependencies": [
    "cmdk",
    "lucide-react"
  ],
  "registryDependencies": [
    "skeleton",
    "https://akasha-ui.pages.dev/r/styles/default/command.json"
  ],
  "files": [
    {
      "path": "akasha-ui/autocomplete.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Check } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Skeleton } from \"@/registry/default/ui/skeleton\";\n\nexport type Option = Record<\"value\" | \"label\", string>;\n\ntype AutoCompleteProps = {\n  options: Option[];\n  emptyMessage: string;\n  isLoading?: boolean;\n  disabled?: boolean;\n  placeholder?: string;\n  className?: string;\n} & (\n  | {\n      multiple: true;\n      value?: Option[];\n      onValueChange?: (value: Option[]) => void;\n    }\n  | {\n      multiple?: false;\n      value?: Option;\n      onValueChange?: (value: Option) => void;\n    }\n);\n\nexport const Autocomplete = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  AutoCompleteProps\n>(\n  (\n    {\n      options,\n      emptyMessage,\n      disabled,\n      isLoading = false,\n      placeholder,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [isOpen, setOpen] = React.useState(false);\n    const [inputValue, setInputValue] = React.useState<string>(\"\");\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        const input = inputRef.current;\n        if (!input) {\n          return;\n        }\n\n        // Keep the options displayed when the user is typing\n        if (!isOpen) {\n          setOpen(true);\n        }\n\n        // This is not a default behaviour of the <input /> field\n        if (event.key === \"Enter\" && input.value !== \"\") {\n          const optionToSelect = options.find(\n            (option) => option.label === input.value\n          );\n          if (optionToSelect) {\n            if (props.multiple === true) {\n              const newSelected = [...(props.value || []), optionToSelect];\n              props.onValueChange?.(newSelected);\n            } else {\n              props.onValueChange?.(optionToSelect);\n            }\n          }\n        }\n\n        if (event.key === \"Escape\") {\n          input.blur();\n        }\n      },\n      [isOpen, options, props]\n    );\n\n    const handleBlur = React.useCallback(() => {\n      setOpen(false);\n      if (props.multiple === false) {\n        setInputValue(props.value?.label || \"\");\n      }\n    }, [props.value, props.multiple]);\n\n    const handleSelectOption = React.useCallback(\n      (selectedOption: Option) => {\n        if (props.multiple === true) {\n          const isSelected = props.value?.some(\n            (option) => option.value === selectedOption.value\n          );\n\n          const newSelected = isSelected\n            ? props.value?.filter(\n                (option) => option.value !== selectedOption.value\n              ) || []\n            : [...(props.value || []), selectedOption];\n\n          setInputValue(\"\");\n          props.onValueChange?.(newSelected);\n        } else {\n          setInputValue(selectedOption.label);\n          props.onValueChange?.(selectedOption);\n\n          setTimeout(() => {\n            inputRef?.current?.blur();\n          }, 0);\n        }\n      },\n      [props]\n    );\n\n    return (\n      <CommandPrimitive ref={ref} onKeyDown={handleKeyDown}>\n        <div\n          className={cn(\n            \" overflow-hidden border rounded-lg h-10 items-center flex\",\n            className\n          )}\n        >\n          <CommandInput\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={isLoading ? undefined : setInputValue}\n            onBlur={handleBlur}\n            onFocus={() => setOpen(true)}\n            placeholder={placeholder}\n            disabled={disabled}\n            className=\"text-sm w-full\"\n          />\n        </div>\n        <div className=\"relative mt-1\">\n          <div\n            className={cn(\n              \"animate-in fade-in-0 zoom-in-95 absolute top-0 z-10 w-full rounded-xl bg-background outline-none\",\n              isOpen ? \"block\" : \"hidden\"\n            )}\n          >\n            <CommandList className=\"rounded-lg ring-1 ring-border\">\n              {isLoading ? (\n                <CommandPrimitive.Loading>\n                  <div className=\"p-1\">\n                    <Skeleton className=\"h-8 w-full\" />\n                  </div>\n                </CommandPrimitive.Loading>\n              ) : null}\n              {options.length > 0 && !isLoading ? (\n                <CommandGroup>\n                  {options.map((option) => {\n                    const isSelected =\n                      props.multiple === true\n                        ? props.value?.some(\n                            (item) => item.value === option.value\n                          )\n                        : props.value?.value === option.value;\n\n                    return (\n                      <CommandItem\n                        key={option.value}\n                        value={option.label}\n                        onMouseDown={(event) => {\n                          event.preventDefault();\n                          event.stopPropagation();\n                        }}\n                        onSelect={() => handleSelectOption(option)}\n                        className={cn(\n                          \"flex w-full items-center gap-2\",\n                          !isSelected ? \"pl-8\" : null\n                        )}\n                      >\n                        {isSelected ? <Check className=\"w-4\" /> : null}\n                        {option.label}\n                      </CommandItem>\n                    );\n                  })}\n                </CommandGroup>\n              ) : null}\n              {!isLoading ? (\n                <CommandPrimitive.Empty className=\"select-none rounded-sm px-2 py-3 text-center text-sm\">\n                  {emptyMessage}\n                </CommandPrimitive.Empty>\n              ) : null}\n            </CommandList>\n          </div>\n        </div>\n      </CommandPrimitive>\n    );\n  }\n);\nAutocomplete.displayName = \"Autocomplete\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}