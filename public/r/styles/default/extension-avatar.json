{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "extension-avatar",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/image.json"
  ],
  "files": [
    {
      "path": "ui/extension-avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { getImageFromSeed } from \"@/registry/default/lib/get-image-from-seed\";\nimport { ExtensionType } from \"@/registry/default/types/extension-type\";\nimport { Image, ImageFallback } from \"@/registry/default/ui/image\";\n\nconst extensionVariants = cva(\n  \"flex justify-center items-center rounded-lg overflow-hidden shrink-0\",\n  {\n    variants: {\n      size: {\n        xl: \"size-28 [&_svg]:size-6\",\n        lg: \"size-15 [&_svg]:size-4\",\n        md: \"size-12 [&_svg]:size-4\",\n        sm: \"size-10 [&_svg]:size-4\",\n      },\n    },\n    defaultVariants: {\n      size: \"lg\",\n    },\n  }\n);\n\nconst ExtensionAvatarContext = React.createContext<{\n  extensionId: string;\n  extensionType: ExtensionType;\n  nsfw: boolean;\n  publicImgPath: string;\n} | null>(null);\n\nconst useExtensionAvatarContext = () => {\n  const context = React.useContext(ExtensionAvatarContext);\n  if (!context) {\n    throw new Error(\n      \"`useExtensionAvatarContext` must be used within an `ExtensionAvatar` component\"\n    );\n  }\n  return context;\n};\n\nconst ExtensionAvatar = ({\n  extensionId = \"\",\n  size = \"lg\",\n  extensionType = ExtensionType.Widget,\n  publicImgPath = \"/images\",\n  nsfw = false,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> &\n  VariantProps<typeof extensionVariants> & {\n    extensionId?: string;\n    extensionType?: ExtensionType;\n    nsfw?: boolean;\n    publicImgPath?: string;\n  }) => (\n  <ExtensionAvatarContext.Provider\n    value={{ extensionId, extensionType, nsfw, publicImgPath }}\n  >\n    <div\n      data-slot=\"extension-avatar\"\n      className={cn(extensionVariants({ size }), nsfw && \"bg-muted\", className)}\n      {...props}\n    />\n  </ExtensionAvatarContext.Provider>\n);\n\nconst ExtensionAvatarImage = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof Image>) => {\n  const { nsfw } = useExtensionAvatarContext();\n  return nsfw ? (\n    <EyeOff strokeWidth={1} className={cn(\"text-destructive\", className)} />\n  ) : (\n    <Image\n      data-slot=\"extension-avatar-image\"\n      className={cn(className)}\n      alt={props.alt}\n      {...props}\n    />\n  );\n};\n\nconst ExtensionAvatarFallback = ({\n  children,\n  ...props\n}: React.ComponentProps<typeof ImageFallback>) => {\n  const { extensionType, publicImgPath, extensionId, nsfw } =\n    useExtensionAvatarContext();\n  const seed = getImageFromSeed(extensionId, 3);\n\n  let avatarFallback: string;\n\n  switch (extensionType) {\n    case ExtensionType.App:\n      avatarFallback = `${publicImgPath}/app-${seed}.webp`;\n      break;\n    case ExtensionType.Widget:\n      avatarFallback = `${publicImgPath}/widget-${seed}.webp`;\n      break;\n    case ExtensionType.Plugin:\n      avatarFallback = `${publicImgPath}/plugin-${seed}.webp`;\n      break;\n    case ExtensionType.Other:\n      avatarFallback = `${publicImgPath}/other-${seed}.webp`;\n      break;\n    default:\n      avatarFallback = `${publicImgPath}/app-${seed}.webp`;\n      break;\n  }\n\n  return (\n    !nsfw &&\n    avatarFallback && (\n      <ImageFallback data-slot=\"extension-avatar-fallback\" {...props}>\n        {React.Children.count(children) ? (\n          children\n        ) : (\n          <img\n            data-slot=\"image\"\n            loading=\"lazy\"\n            decoding=\"async\"\n            src={avatarFallback}\n            alt=\"fallback\"\n            className=\"object-contain\"\n          />\n        )}\n      </ImageFallback>\n    )\n  );\n};\n\nexport { ExtensionAvatar, ExtensionAvatarImage, ExtensionAvatarFallback };\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/get-image-from-seed.ts",
      "content": "/**\n * Utility function to generate avatar placeholders from seed (could be ETH address or DID etc).\n * Helpful for when avatar is null or undefined\n * @param seed - string or null\n * @returns placeholder image number\n */\nexport const getImageFromSeed = (\n  seed: string | null,\n  numberOfPlaceholders: number\n) => {\n  let str = seed;\n\n  if (seed && seed.search(\"0x\") != -1) {\n    str = seed.replace(\"0x\", \"\");\n  }\n\n  if (str && str.length) {\n    const avatarOption = Array.from(str).reduce(\n      (sum: number, letter: string) => {\n        if (parseInt(letter, 10)) {\n          return sum + parseInt(letter, 10);\n        }\n        return sum;\n      },\n      0\n    );\n\n    /**\n     * if user is a visitor his address is 0x0000... so sum is 0\n     * you can give him a specific placeholder\n     */\n    if (avatarOption === 0) {\n      return numberOfPlaceholders;\n    }\n\n    return (avatarOption % (numberOfPlaceholders - 1)) + 1;\n  }\n  // load the first placeholder, just to not throw and error\n  return numberOfPlaceholders;\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "types/extension-type.ts",
      "content": "export enum ExtensionType {\n  App = \"APP\",\n  Other = \"OTHER\",\n  Plugin = \"PLUGIN\",\n  Widget = \"WIDGET\",\n}\n",
      "type": "registry:lib"
    }
  ]
}