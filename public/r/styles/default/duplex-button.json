{
  "name": "duplex-button",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "akasha-ui/duplex-button.tsx",
      "content": "\"use client\";\n\nimport React, { createContext, forwardRef, useContext } from \"react\";\n\nimport { Button, ButtonProps } from \"@/registry/default/ui/button\";\n\ninterface DuplexButtonContextType {\n  isActive: boolean;\n  isHovered: boolean;\n  setIsHovered: (value: boolean) => void;\n}\n\nconst DuplexButtonContext = createContext<DuplexButtonContextType | undefined>(\n  undefined\n);\n\nexport type DuplexButtonProps = {\n  children: React.ReactNode;\n  active: boolean;\n  className?: string;\n};\n\ntype DuplexButtonEvents = Pick<\n  ButtonProps,\n  | \"onClick\"\n  | \"onMouseEnter\"\n  | \"onMouseLeave\"\n  | \"onFocus\"\n  | \"onBlur\"\n  | \"onKeyDown\"\n  | \"onKeyUp\"\n  | \"onDoubleClick\"\n>;\n\nexport type DuplexButtonActiveProps = DuplexButtonEvents & {\n  children: React.ReactNode;\n};\n\nexport type DuplexButtonActiveDefaultProps = Omit<\n  ButtonProps,\n  keyof DuplexButtonEvents\n>;\nexport type DuplexButtonActiveHoverProps = ButtonProps;\nexport type DuplexButtonInactiveProps = ButtonProps;\n\nconst DuplexButton = forwardRef<React.ElementRef<\"div\">, DuplexButtonProps>(\n  ({ children, active, ...props }, ref) => {\n    const [isHovered, setIsHovered] = React.useState(false);\n\n    return (\n      <DuplexButtonContext.Provider\n        value={{\n          isActive: active,\n          isHovered,\n          setIsHovered,\n        }}\n      >\n        <div\n          ref={ref}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          style={{ display: \"inline-block\" }}\n          {...props}\n        >\n          {children}\n        </div>\n      </DuplexButtonContext.Provider>\n    );\n  }\n);\n\nconst useDuplexButtonContext = () => {\n  const context = useContext(DuplexButtonContext);\n  if (!context) {\n    throw new Error(\n      \"DuplexButton compound components must be used within DuplexButton\"\n    );\n  }\n  return context;\n};\n\nexport const DuplexButtonActive: React.FC<DuplexButtonActiveProps> = ({\n  children,\n  onClick,\n  ...props\n}) => {\n  const { isActive } = useDuplexButtonContext();\n  if (!isActive) return null;\n\n  return (\n    <button onClick={onClick} {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport const DuplexButtonActiveDefault: React.FC<\n  DuplexButtonActiveDefaultProps\n> = ({ children, ...props }) => {\n  const { isHovered } = useDuplexButtonContext();\n  if (isHovered) return null;\n\n  return <Button {...props}>{children}</Button>;\n};\n\nexport const DuplexButtonActiveHover: React.FC<\n  DuplexButtonActiveHoverProps\n> = ({ children, ...props }) => {\n  const { isHovered } = useDuplexButtonContext();\n  if (!isHovered) return null;\n\n  return <Button {...props}>{children}</Button>;\n};\n\nexport const DuplexButtonInactive: React.FC<DuplexButtonInactiveProps> = ({\n  children,\n  onClick,\n  ...props\n}) => {\n  const { isActive } = useDuplexButtonContext();\n  if (isActive) return null;\n\n  return (\n    <Button onClick={onClick} {...props}>\n      {children}\n    </Button>\n  );\n};\n\nexport default DuplexButton;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}