{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "duplex-button",
  "type": "registry:ui",
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "ui/duplex-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/default/ui/button\";\n\nconst DuplexButtonContext = React.createContext<{\n  active: boolean;\n  size: React.ComponentProps<typeof Button>[\"size\"];\n  loading?: boolean;\n  disabled?: boolean;\n} | null>(null);\n\nconst useDuplexButtonContext = () => {\n  const context = React.useContext(DuplexButtonContext);\n  if (!context) {\n    throw new Error(\n      \"`useDuplexButtonContext` must be used within `DuplexButton`\"\n    );\n  }\n  return context;\n};\n\nconst DuplexButton = ({\n  size = \"default\",\n  active,\n  loading,\n  disabled,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  active: boolean;\n  size?: React.ComponentProps<typeof Button>[\"size\"];\n  loading?: boolean;\n  disabled?: boolean;\n  children: React.ReactNode;\n}) => {\n  return (\n    <DuplexButtonContext.Provider\n      value={{\n        active,\n        size,\n        loading,\n        disabled,\n      }}\n    >\n      <div\n        data-slot=\"duplex-button\"\n        className={cn(\n          \"group/duplex-button [&_button]:w-full space-2\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </DuplexButtonContext.Provider>\n  );\n};\n\nconst DuplexButtonActive = ({\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>) => {\n  const { active, loading, disabled, size } = useDuplexButtonContext();\n  if (!active) return;\n  return (\n    <Button\n      data-slot=\"duplex-button-active\"\n      loading={loading}\n      disabled={disabled}\n      size={size}\n      className={cn(\n        {\n          \"group-hover/duplex-button:hidden\": !loading && !disabled,\n        },\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nconst DuplexButtonHover = ({\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>) => {\n  const { active, loading, disabled, size } = useDuplexButtonContext();\n  if (loading || disabled || !active) return;\n  return (\n    <Button\n      data-slot=\"duplex-button-hover\"\n      size={size}\n      className={cn(\n        \"hidden group-hover/duplex-button:flex border border-destructive text-destructive bg-transparent hover:bg-transparent\",\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nconst DuplexButtonInactive = (\n  props: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>\n) => {\n  const { active, loading, disabled, size } = useDuplexButtonContext();\n  if (active) return;\n  return (\n    <Button\n      data-slot=\"duplex-button-inactive\"\n      size={size}\n      loading={loading}\n      disabled={disabled}\n      {...props}\n    />\n  );\n};\n\nexport {\n  DuplexButton,\n  DuplexButtonActive,\n  DuplexButtonHover,\n  DuplexButtonInactive,\n};\n",
      "type": "registry:ui"
    }
  ]
}