{
  "name": "duplex-button",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "akasha-ui/duplex-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button, ButtonProps } from \"@/registry/default/ui/button\";\n\ninterface DuplexButtonContext {\n  active: boolean;\n  hovered: boolean;\n  onHovered: (value: boolean) => void;\n}\n\ninterface DuplexButtonProps {\n  active: boolean;\n  children: React.ReactNode;\n}\n\nconst DuplexButtonContext = React.createContext<DuplexButtonContext | null>(\n  null\n);\n\nconst useDuplexButtonContext = () => {\n  const context = React.useContext(DuplexButtonContext);\n  if (!context) {\n    throw new Error(\n      \"`useDuplexButtonContext` must be used within `DuplexButton`\"\n    );\n  }\n  return context;\n};\n\nconst DuplexButton = ({ children, active }: DuplexButtonProps) => {\n  const [hovered, setHovered] = React.useState(false);\n  return (\n    <DuplexButtonContext.Provider\n      value={{\n        active,\n        hovered,\n        onHovered: (hovered) => setHovered(hovered),\n      }}\n    >\n      {children}\n    </DuplexButtonContext.Provider>\n  );\n};\n\nexport const DuplexButtonActive = React.forwardRef<\n  HTMLButtonElement,\n  ButtonProps\n>(({ ...props }, ref) => {\n  const { active, hovered, onHovered } = useDuplexButtonContext();\n  return (\n    active &&\n    !hovered && (\n      <Button ref={ref} onMouseEnter={() => onHovered(true)} {...props} />\n    )\n  );\n});\n\nexport const DuplexButtonHover = React.forwardRef<\n  HTMLButtonElement,\n  ButtonProps\n>(({ ...props }, ref) => {\n  const { active, hovered, onHovered } = useDuplexButtonContext();\n  return (\n    active &&\n    hovered && (\n      <Button ref={ref} onMouseLeave={() => onHovered(false)} {...props} />\n    )\n  );\n});\n\nexport const DuplexButtonInactive = React.forwardRef<\n  HTMLButtonElement,\n  ButtonProps\n>(({ ...props }, ref) => {\n  const { active } = useDuplexButtonContext();\n  return !active && <Button ref={ref} {...props} />;\n});\n\nexport default DuplexButton;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}