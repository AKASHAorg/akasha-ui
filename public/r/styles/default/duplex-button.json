{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "duplex-button",
  "type": "registry:ui",
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/button.json"
  ],
  "files": [
    {
      "path": "ui/duplex-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button } from \"@/registry/default/ui/button\";\n\nconst DuplexButtonContext = React.createContext<{\n  active: boolean;\n  hovered: boolean;\n  onHovered: (value: boolean) => void;\n} | null>(null);\n\nconst useDuplexButtonContext = () => {\n  const context = React.useContext(DuplexButtonContext);\n  if (!context) {\n    throw new Error(\n      \"`useDuplexButtonContext` must be used within `DuplexButton`\"\n    );\n  }\n  return context;\n};\n\nconst DuplexButton = ({\n  children,\n  active,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  active: boolean;\n  children: React.ReactNode;\n}) => {\n  const [hovered, setHovered] = React.useState(false);\n  return (\n    <DuplexButtonContext.Provider\n      value={{\n        active,\n        hovered,\n        onHovered: (hovered) => setHovered(hovered),\n      }}\n    >\n      <div data-slot=\"duplex-button\" {...props}>\n        {children}\n      </div>\n    </DuplexButtonContext.Provider>\n  );\n};\n\nconst DuplexButtonActive = ({\n  ...props\n}: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>) => {\n  const { active, hovered, onHovered } = useDuplexButtonContext();\n  return (\n    active &&\n    !hovered && (\n      <Button\n        data-slot=\"duplex-button-active\"\n        onMouseEnter={() => onHovered(true)}\n        {...props}\n      />\n    )\n  );\n};\n\nconst DuplexButtonHover = ({\n  ...props\n}: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>) => {\n  const { active, hovered, onHovered } = useDuplexButtonContext();\n  return (\n    active &&\n    hovered && (\n      <Button\n        data-slot=\"duplex-button-hover\"\n        onMouseLeave={() => onHovered(false)}\n        {...props}\n      />\n    )\n  );\n};\n\nconst DuplexButtonInactive = ({\n  ...props\n}: React.ComponentProps<\"button\"> & React.ComponentProps<typeof Button>) => {\n  const { active } = useDuplexButtonContext();\n  return !active && <Button data-slot=\"duplex-button-inactive\" {...props} />;\n};\n\nexport {\n  DuplexButton,\n  DuplexButtonActive,\n  DuplexButtonHover,\n  DuplexButtonInactive,\n};\n",
      "type": "registry:ui"
    }
  ]
}