{
  "name": "auto-complete-demo",
  "type": "registry:example",
  "registryDependencies": [
    "auto-complete"
  ],
  "files": [
    {
      "path": "examples/auto-complete-demo.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n  AutoComplete,\n  type Option,\n} from \"@/registry/default/akasha-ui/auto-complete\";\n\n// Sample data for demonstrations\nconst frameworks = [\n  { value: \"next.js\", label: \"Next.js\" },\n  { value: \"sveltekit\", label: \"SvelteKit\" },\n  { value: \"nuxt\", label: \"Nuxt.js\" },\n  { value: \"remix\", label: \"Remix\" },\n  { value: \"astro\", label: \"Astro\" },\n];\n\nexport default function AutoCompleteDemo() {\n  const [basicValue, setBasicValue] = React.useState<Option | Option[]>();\n  const [multiValue, setMultiValue] = React.useState<Option[]>([]);\n\n  return (\n    <div className=\"flex flex-col gap-8\">\n      {/* Basic Usage */}\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-lg font-semibold\">Basic Autocomplete</h3>\n        <AutoComplete\n          options={frameworks}\n          value={basicValue}\n          onValueChange={setBasicValue}\n          placeholder=\"Select a framework...\"\n          emptyMessage=\"No frameworks found\"\n        />\n        <p className=\"text-sm text-muted-foreground\">\n          Selected value: {(basicValue as Option)?.label || \"None\"}\n        </p>\n      </div>\n\n      {/* Multiple Selection */}\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-lg font-semibold\">Multiple Selection</h3>\n        <AutoComplete\n          options={frameworks}\n          value={multiValue}\n          onValueChange={(value) => {\n            if (Array.isArray(value)) {\n              setMultiValue(value);\n            }\n          }}\n          placeholder=\"Select frameworks...\"\n          emptyMessage=\"No frameworks found\"\n          multiple\n        />\n        <p className=\"text-sm text-muted-foreground\">\n          Selected values:{\" \"}\n          {multiValue.length\n            ? multiValue.map((v) => v.label).join(\", \")\n            : \"None\"}\n        </p>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}