{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profile-avatar-button",
  "type": "registry:ui",
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar.json",
    "https://akasha-ui.pages.dev/r/styles/default/stack.json",
    "https://akasha-ui.pages.dev/r/styles/default/icon-container.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json"
  ],
  "files": [
    {
      "path": "ui/profile-avatar-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { z } from \"zod\";\n\nimport { cn } from \"@/lib/utils\";\nimport { DidKey } from \"@/registry/default/custom-icons/did-key\";\nimport { Ethereum } from \"@/registry/default/custom-icons/ethereum\";\nimport { NoEth } from \"@/registry/default/custom-icons/no-eth\";\nimport { Solana } from \"@/registry/default/custom-icons/solana\";\nimport { IconContainer } from \"@/registry/default/ui/icon-container\";\nimport {\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n  ProfileAvatar as ProfileAvatarRoot,\n} from \"@/registry/default/ui/profile-avatar\";\nimport { Stack } from \"@/registry/default/ui/stack\";\nimport { Typography } from \"@/registry/default/ui/typography\";\n\ntype ProfileAvatarButtonSize = \"sm\" | \"lg\" | \"md\";\n\nconst DID_SCHEMA = z\n  .string()\n  .min(5)\n  .refine((x: string) => x.startsWith(\"did:\"));\n\nconst ProfileAvatarButtonContext = React.createContext<{\n  profileDID: string;\n  size: ProfileAvatarButtonSize;\n  nsfw: boolean;\n  nsfwLabel: string;\n  metadata: React.ReactNode;\n  vertical: boolean;\n} | null>(null);\n\nconst useProfileAvatarButtonContext = () => {\n  const context = React.useContext(ProfileAvatarButtonContext);\n  if (!context) {\n    throw new Error(\n      \"`useProfileAvatarButtonContext` must be used within `ProfileAvatarButton`\"\n    );\n  }\n  return context;\n};\n\nconst truncateMiddle = (str: string, startChars = 6, endChars = 4) =>\n  str\n    ? `${str.substring(0, startChars)}...${str.substring(\n        str.length - endChars\n      )}`\n    : \"\";\n\nconst truncateDid = (didKey: string, type = \"eth\") => {\n  if (!didKey) return \"\";\n  if (didKey.length <= 12) return didKey;\n  const address = didKey.split(\":\").pop() || \"\";\n  return truncateMiddle(\n    address,\n    type === \"eth\" || type === \"solana\" ? 6 : 5,\n    6\n  );\n};\n\nconst getDidFieldIconType = (didKey: string) => {\n  if (!didKey) return \"noDid\";\n  if (didKey.includes(\"eip155\")) return \"ethereum\";\n  return didKey.includes(\"solana\") ? \"solana\" : \"did\";\n};\n\nconst ProfileAvatarButton = ({\n  profileDID = \"\",\n  nsfw = false,\n  nsfwLabel = \"\",\n  metadata,\n  children,\n  size = \"md\",\n  vertical = false,\n  className,\n  ...props\n}: {\n  profileDID?: string;\n  nsfw?: boolean;\n  nsfwLabel?: string;\n  metadata?: React.ReactNode;\n} & (\n  | { size?: Exclude<ProfileAvatarButtonSize, \"lg\">; vertical?: false }\n  | {\n      size?: \"lg\";\n      vertical?: true;\n    }\n) &\n  React.ComponentProps<\"div\">) => {\n  return (\n    <ProfileAvatarButtonContext.Provider\n      value={{ profileDID, nsfw, nsfwLabel, size, metadata, vertical }}\n    >\n      <div\n        data-slot=\"profile-avatar-button\"\n        className={cn(\n          {\n            \"grid grid-cols-[0.5fr_1fr] grid-rows-2\":\n              size === \"lg\" && !vertical,\n            \"grid grid-cols-[0fr_1fr] grid-rows-2\": size === \"md\",\n            \"flex items-center flex-col\": size === \"lg\" && vertical,\n            \"flex items-center\": size === \"sm\",\n          },\n          \"gap-1\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </ProfileAvatarButtonContext.Provider>\n  );\n};\n\nconst sizeMap = { lg: \"xl\", md: \"lg\", sm: \"xs\" } as const;\n\nconst ProfileAvatar = ({\n  className,\n  ...props\n}: Omit<React.ComponentProps<typeof ProfileAvatarRoot>, \"size\">) => {\n  const { profileDID, size, nsfw, vertical } = useProfileAvatarButtonContext();\n  return (\n    <ProfileAvatarRoot\n      data-slot=\"profile-avatar\"\n      profileDID={profileDID}\n      size={sizeMap[size]}\n      nsfw={nsfw}\n      className={cn(\n        {\n          \"self-center row-span-2\":\n            size === \"md\" || (size === \"lg\" && !vertical),\n        },\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nconst ProfileName = ({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\">) => {\n  const { size, vertical, nsfw, nsfwLabel, metadata } =\n    useProfileAvatarButtonContext();\n  return (\n    size && (\n      <Stack\n        data-slot=\"profile-name\"\n        direction=\"row\"\n        alignItems=\"center\"\n        spacing={1}\n        className={cn({\n          \"self-end\": size === \"lg\" && !vertical,\n          \"justify-self-start\": size === \"md\" || (size === \"lg\" && !vertical),\n        })}\n        {...props}\n      >\n        <Typography\n          variant={size === \"sm\" ? \"xs\" : \"sm\"}\n          bold={size !== \"sm\"}\n          className={className}\n        >\n          {children}\n        </Typography>\n        {nsfw && size !== \"sm\" && (\n          <Typography\n            data-slot=\"nsfw-label\"\n            variant=\"xs\"\n            bold={true}\n            className=\"text-destructive\"\n          >\n            {nsfwLabel}\n          </Typography>\n        )}\n        {metadata}\n      </Stack>\n    )\n  );\n};\n\nconst didNetworkIconMapping = {\n  ethereum: <Ethereum />,\n  solana: <Solana />,\n  did: <DidKey />,\n  noDid: <NoEth />,\n};\n\nconst ProfileDidField = ({ className }: React.ComponentProps<\"div\">) => {\n  const { profileDID, size, vertical } = useProfileAvatarButtonContext();\n  const networkType = getDidFieldIconType(profileDID);\n  const { success: isValidDID } = DID_SCHEMA.safeParse(profileDID);\n\n  return (\n    <Stack\n      data-slot=\"profile-did-field\"\n      direction=\"row\"\n      spacing={1.5}\n      alignItems=\"center\"\n      className={cn(\n        \"h-4\",\n        {\n          \"col-start-2\": size === \"md\" || (size === \"lg\" && !vertical),\n        },\n        className\n      )}\n    >\n      <IconContainer size=\"xs\" className=\"text-secondary-foreground\">\n        {isValidDID ? didNetworkIconMapping[networkType] : <NoEth />}\n      </IconContainer>\n      <Typography variant=\"xs\" className=\"text-secondary-foreground\">\n        {isValidDID ? truncateDid(profileDID, networkType) : \"Invalid DID\"}\n      </Typography>\n    </Stack>\n  );\n};\n\nconst ProfileAvatarButtonAvatar = ProfileAvatar;\nconst ProfileAvatarButtonAvatarFallback = ProfileAvatarFallback;\nconst ProfileAvatarButtonAvatarImage = ProfileAvatarImage;\n\nexport {\n  ProfileAvatarButton,\n  ProfileName,\n  ProfileDidField,\n  ProfileAvatarButtonAvatar,\n  ProfileAvatarButtonAvatarFallback,\n  ProfileAvatarButtonAvatarImage,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "custom-icons/did-key.tsx",
      "content": "import React from \"react\";\nimport { LucideProps } from \"lucide-react\";\n\nexport const DidKey = (props: LucideProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M16.5 8a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z\" />\n    <path d=\"M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4l-6.814 6.814Z\" />\n    <path d=\"M16.5 8a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z\" />\n  </svg>\n);\n",
      "type": "registry:file",
      "target": "custom-icons/did-key.tsx"
    },
    {
      "path": "custom-icons/ethereum.tsx",
      "content": "import React from \"react\";\nimport { LucideProps } from \"lucide-react\";\n\nexport const Ethereum = (props: LucideProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path\n      d=\"M11.9999 16.4904V1.6001L5.5 12.606L11.9999 16.4904Z\"\n      fill=\"#FFE644\"\n    />\n    <path\n      d=\"M11.9999 1.6001L18.5 12.606L11.9999 16.4904V1.6001Z\"\n      fill=\"#EC7463\"\n    />\n    <path d=\"M5.5 13.4421L11.9999 17.3263V22.3507\" fill=\"#009ECB\" />\n    <path d=\"M18.5 13.4421L11.9999 17.3263V22.3507\" fill=\"#4D68AE\" />\n    <path\n      d=\"M11.9999 8.72216L5.5 12.606L11.9999 16.4904V8.72216Z\"\n      fill=\"#57A759\"\n    />\n    <path\n      d=\"M11.9999 8.72216L18.5 12.606L11.9999 16.4904V8.72216Z\"\n      fill=\"#8E5298\"\n    />\n  </svg>\n);\n",
      "type": "registry:file",
      "target": "custom-icons/ethereum.tsx"
    },
    {
      "path": "custom-icons/no-eth.tsx",
      "content": "import React from \"react\";\nimport { LucideProps } from \"lucide-react\";\n\nexport const NoEth = (props: LucideProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M17.849 6.19c2.01-.37 3.49-.21 3.98.573 1.01 1.616-2.57 5.27-7.998 8.163-5.428 2.892-10.65 3.927-11.66 2.31-.533-.852.21-2.27 1.829-3.846M20 12a8 8 0 1 1-16 0 8 8 0 0 1 16 0Z\" />\n  </svg>\n);\n",
      "type": "registry:file",
      "target": "custom-icons/no-eth.tsx"
    },
    {
      "path": "custom-icons/solana.tsx",
      "content": "import React from \"react\";\nimport { LucideProps } from \"lucide-react\";\n\nexport const Solana = (props: LucideProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"m22 14-5 5H2l5-5m15 0H7m15 0-5-5M7 14 2 9m0 0h15M2 9l5-5h15l-5 5\" />\n  </svg>\n);\n",
      "type": "registry:file",
      "target": "custom-icons/solana.tsx"
    }
  ]
}