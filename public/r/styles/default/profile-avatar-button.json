{
  "name": "profile-avatar-button",
  "type": "registry:ui",
  "registryDependencies": [
    "https://akasha-ui.pages.dev/r/styles/default/profile-avatar.json",
    "https://akasha-ui.pages.dev/r/styles/default/stack.json",
    "https://akasha-ui.pages.dev/r/styles/default/icon-container.json",
    "https://akasha-ui.pages.dev/r/styles/default/typography.json"
  ],
  "files": [
    {
      "path": "akasha-ui/profile-avatar-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { IconContainer } from \"@/registry/default/akasha-ui/icon-container\";\nimport {\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n  ProfileAvatar as ProfileAvatarRoot,\n} from \"@/registry/default/akasha-ui/profile-avatar\";\nimport { Stack } from \"@/registry/default/akasha-ui/stack\";\nimport { Typography } from \"@/registry/default/akasha-ui/typography\";\nimport { DidKey } from \"@/registry/default/custom-icons/did-key\";\nimport { Ethereum } from \"@/registry/default/custom-icons/ethereum\";\nimport { NoEth } from \"@/registry/default/custom-icons/no-eth\";\nimport { Solana } from \"@/registry/default/custom-icons/solana\";\n\ntype Orientation = \"horizontal\" | \"vertical\";\n\ntype ProfileAvatarButtonSize = \"lg\" | \"md\" | \"sm\";\n\nconst ProfileAvatarButtonContext = React.createContext<{\n  size: ProfileAvatarButtonSize;\n  nsfw: boolean;\n  orientation: Orientation | null;\n} | null>(null);\n\nconst useProfileAvatarButtonContext = () => {\n  const context = React.useContext(ProfileAvatarButtonContext);\n  if (!context) {\n    throw new Error(\n      \"`useProfileAvatarButtonContext` must be used within `ProfileAvatarButton`\"\n    );\n  }\n  return context;\n};\n\nconst truncateMiddle = (str: string, startChars = 6, endChars = 4) =>\n  str\n    ? `${str.substring(0, startChars)}...${str.substring(\n        str.length - endChars\n      )}`\n    : \"\";\n\nconst truncateDid = (didKey: string, type = \"eth\") => {\n  if (!didKey) return \"\";\n  if (didKey.length <= 12) return didKey;\n  const address = didKey.split(\":\").pop() || \"\";\n  return truncateMiddle(\n    address,\n    type === \"eth\" || type === \"solana\" ? 6 : 5,\n    6\n  );\n};\n\nconst getDidFieldIconType = (didKey: string) => {\n  if (!didKey) return \"noDid\";\n  return didKey.includes(\"eip155\")\n    ? \"ethereum\"\n    : didKey.includes(\"solana\")\n      ? \"solana\"\n      : \"did\";\n};\n\nconst ProfileAvatarButton = ({\n  nsfw = false,\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & { nsfw?: boolean } & (\n    | { size?: Exclude<ProfileAvatarButtonSize, \"lg\"> }\n    | {\n        size?: \"lg\";\n        orientation?: Orientation;\n      }\n  )) => {\n  const size = props.size || \"md\";\n  const orientation =\n    props.size === \"lg\" ? props.orientation || \"vertical\" : null;\n  return (\n    <ProfileAvatarButtonContext.Provider value={{ size, nsfw, orientation }}>\n      <div\n        data-slot=\"profile-avatar-button\"\n        className={cn(\n          {\n            \"grid grid-cols-[0.5fr_1fr] grid-rows-2\":\n              size === \"lg\" && orientation === \"horizontal\",\n            \"grid grid-cols-[0fr_1fr] grid-rows-2\": size === \"md\",\n            \"flex items-center flex-col\":\n              size === \"lg\" && orientation === \"vertical\",\n            \"flex items-center\": size === \"sm\",\n          },\n          \"gap-1\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </ProfileAvatarButtonContext.Provider>\n  );\n};\n\nconst sizeMap = { lg: \"xl\", md: \"lg\", sm: \"xs\" } as const;\n\nconst ProfileAvatar = ({\n  className,\n  ...props\n}: Omit<React.ComponentProps<typeof ProfileAvatarRoot>, \"size\">) => {\n  const { size, nsfw, orientation } = useProfileAvatarButtonContext();\n  return (\n    <ProfileAvatarRoot\n      data-slot=\"profile-avatar\"\n      size={sizeMap[size]}\n      nsfw={nsfw}\n      className={cn(\n        {\n          \"self-center row-span-2\":\n            size === \"md\" || (size === \"lg\" && orientation === \"horizontal\"),\n        },\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nconst ProfileName = ({\n  nsfwLabel,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & { nsfwLabel?: string }) => {\n  const { size, orientation, nsfw } = useProfileAvatarButtonContext();\n  return (\n    size && (\n      <Stack\n        data-slot=\"profile-name\"\n        alignItems=\"center\"\n        spacing={1}\n        className={cn(\n          {\n            \"self-end\": size === \"lg\" && orientation === \"horizontal\",\n            \"justify-self-start\":\n              size === \"md\" || (size === \"lg\" && orientation === \"horizontal\"),\n          },\n          className\n        )}\n        {...props}\n      >\n        <Typography variant={size === \"sm\" ? \"xs\" : \"sm\"} bold={size !== \"sm\"}>\n          {children}\n        </Typography>\n        {nsfw && <Typography>{nsfwLabel}</Typography>}\n      </Stack>\n    )\n  );\n};\n\nconst didNetworkIconMapping = {\n  ethereum: <Ethereum />,\n  solana: <Solana />,\n  did: <DidKey />,\n  noDid: <NoEth />,\n};\n\nconst ProfileDidField = ({\n  did,\n  isValid = true,\n  className,\n}: React.ComponentProps<\"div\"> & {\n  did: string;\n  isValid?: boolean;\n  className?: string;\n}) => {\n  const { size, orientation } = useProfileAvatarButtonContext();\n  const networkType = getDidFieldIconType(did);\n  return (\n    <Stack\n      data-slot=\"profile-did-field\"\n      direction=\"row\"\n      spacing={1.5}\n      alignItems=\"center\"\n      className={cn(\n        \"h-4\",\n        {\n          \"col-start-2\":\n            size === \"md\" || (size === \"lg\" && orientation === \"horizontal\"),\n        },\n        className\n      )}\n    >\n      <IconContainer size=\"xs\" className=\"text-secondary-foreground\">\n        {isValid ? didNetworkIconMapping[networkType] : <NoEth />}\n      </IconContainer>\n      <Typography variant=\"xs\" className=\"text-secondary-foreground\">\n        {truncateDid(did, networkType)}\n      </Typography>\n    </Stack>\n  );\n};\n\nexport {\n  ProfileAvatarButton,\n  ProfileAvatar,\n  ProfileAvatarFallback,\n  ProfileAvatarImage,\n  ProfileName,\n  ProfileDidField,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}