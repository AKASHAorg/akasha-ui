{
  "name": "auto-complete",
  "type": "registry:ui",
  "files": [
    {
      "path": "akasha-ui/auto-complete.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useRef, useState, type KeyboardEvent, forwardRef, useImperativeHandle } from \"react\";\nimport { Command as CommandPrimitive, CommandSeparator } from \"cmdk\";\nimport { Check } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\";\nimport { Skeleton } from \"@/registry/default/ui/skeleton\";\n\nexport type Option = Record<\"value\" | \"label\", string> & Record<string, string>;\n\nexport interface AutoCompleteRef {\n  deselectOption: (optionToDeselect: Option) => void;\n}\n\ntype AutoCompleteProps = {\n  options: Option[];\n  emptyMessage: string;\n  value?: Option | Option[];\n  onValueChange?: (value: Option | Option[]) => void;\n  isLoading?: boolean;\n  disabled?: boolean;\n  placeholder?: string;\n  multiple?: boolean;\n};\n\nexport const AutoComplete = forwardRef<AutoCompleteRef, AutoCompleteProps>(({\n  options,\n  placeholder,\n  emptyMessage,\n  value,\n  onValueChange,\n  disabled,\n  isLoading = false,\n  multiple = false,\n}, ref) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isOpen, setOpen] = useState(false);\n  const [selected, setSelected] = useState<Option[]>(\n    multiple\n      ? Array.isArray(value)\n        ? value\n        : []\n      : value\n      ? [value as Option]\n      : []\n  );\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  const handleDeselect = useCallback((optionToDeselect: Option) => {\n    if (!multiple) return;\n    \n    const newSelected = selected.filter(\n      (option) => option.value !== optionToDeselect.value\n    );\n    setSelected(newSelected);\n    setInputValue(\"\");\n    onValueChange?.(newSelected);\n  }, [multiple, selected, onValueChange]);\n\n  useImperativeHandle(ref, () => ({\n    deselectOption: handleDeselect\n  }), [handleDeselect]);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current;\n      if (!input) {\n        return;\n      }\n\n      // Keep the options displayed when the user is typing\n      if (!isOpen) {\n        setOpen(true);\n      }\n\n      // This is not a default behaviour of the <input /> field\n      if (event.key === \"Enter\" && input.value !== \"\") {\n        const optionToSelect = options.find(\n          (option) => option.label === input.value\n        );\n        if (optionToSelect) {\n          setSelected([optionToSelect]);\n          onValueChange?.(optionToSelect);\n        }\n      }\n\n      if (event.key === \"Escape\") {\n        input.blur();\n      }\n    },\n    [isOpen, options, onValueChange]\n  );\n\n  const handleBlur = useCallback(() => {\n    setOpen(false);\n    if (!multiple) {\n      setInputValue(selected[0]?.label || \"\");\n    }\n  }, [selected, multiple]);\n\n  const handleSelectOption = useCallback(\n    (selectedOption: Option) => {\n      if (multiple) {\n        const isSelected = selected.some(\n          (option) => option.value === selectedOption.value\n        );\n        const newSelected = isSelected\n          ? selected.filter((option) => option.value !== selectedOption.value)\n          : [...selected, selectedOption];\n\n        setSelected(newSelected);\n        setInputValue(\"\");\n        onValueChange?.(newSelected);\n      } else {\n        setInputValue(selectedOption.label);\n        setSelected([selectedOption]);\n        onValueChange?.(selectedOption);\n\n        // This is a hack to prevent the input from being focused after the user selects an option\n        setTimeout(() => {\n          inputRef?.current?.blur();\n        }, 0);\n      }\n    },\n    [multiple, selected, onValueChange]\n  );\n\n  return (\n    <CommandPrimitive onKeyDown={handleKeyDown}>\n      <div className=\"border rounded-lg\">\n        <CommandInput\n          ref={inputRef}\n          value={inputValue}\n          onValueChange={isLoading ? undefined : setInputValue}\n          onBlur={handleBlur}\n          onFocus={() => setOpen(true)}\n          placeholder={placeholder}\n          disabled={disabled}\n          className=\"text-base\"\n        />\n      </div>\n      <div className=\"relative mt-1\">\n        <div\n          className={cn(\n            \"animate-in fade-in-0 zoom-in-95 absolute top-0 z-10 w-full rounded-xl bg-background outline-none\",\n            isOpen ? \"block\" : \"hidden\"\n          )}\n        >\n          <CommandList className=\"rounded-lg ring-1 ring-muted\">\n            {isLoading ? (\n              <CommandPrimitive.Loading>\n                <div className=\"p-1\">\n                  <Skeleton className=\"h-8 w-full\" />\n                </div>\n              </CommandPrimitive.Loading>\n            ) : null}\n            {options.length > 0 && !isLoading ? (\n              <CommandGroup>\n                {options.map((option) => {\n                  const isSelected = selected.some(\n                    (item) => item.value === option.value\n                  );\n                  return (\n                    <CommandItem\n                      key={option.value}\n                      value={option.label}\n                      onMouseDown={(event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                      }}\n                      onSelect={() => handleSelectOption(option)}\n                      className={cn(\n                        \"flex w-full items-center gap-2\",\n                        !isSelected ? \"pl-8\" : null\n                      )}\n                    >\n                      {isSelected ? <Check className=\"w-4\" /> : null}\n                      {option.label}\n                    </CommandItem>\n                  );\n                })}\n              </CommandGroup>\n            ) : null}\n            {!isLoading ? (\n              <CommandPrimitive.Empty className=\"select-none rounded-sm px-2 py-3 text-center text-sm\">\n                {emptyMessage}\n              </CommandPrimitive.Empty>\n            ) : null}\n          </CommandList>\n        </div>\n      </div>\n    </CommandPrimitive>\n  );\n});\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}